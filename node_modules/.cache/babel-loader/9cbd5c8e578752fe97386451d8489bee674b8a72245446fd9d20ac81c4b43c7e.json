{"ast":null,"code":"const API_URL = 'https://sic-agent-app-adg1.onrender.com';\n\n// Simple response templates for demo purposes\nconst RESPONSES = {\n  greeting: [\"Hello! How can I help you today?\", \"Hi there! What can I do for you?\", \"Greetings! How may I assist you?\"],\n  farewell: [\"Goodbye! Have a great day!\", \"See you later! Take care!\", \"Bye! Feel free to come back if you need more help!\"],\n  thanks: [\"You're welcome!\", \"Glad I could help!\", \"My pleasure! Is there anything else you need?\"],\n  default: [\"I'm not sure I understand. Could you rephrase that?\", \"I'm still learning. Could you try asking in a different way?\", \"I'm not sure about that. Can you provide more details?\"]\n};\n\n// Simple keyword matching for demo purposes\nconst getResponseType = message => {\n  const lowerMessage = message.toLowerCase();\n  if (lowerMessage.match(/^(hi|hello|hey|greetings)/)) {\n    return 'greeting';\n  }\n  if (lowerMessage.match(/^(bye|goodbye|see you|farewell)/)) {\n    return 'farewell';\n  }\n  if (lowerMessage.match(/^(thanks|thank you|appreciate it)/)) {\n    return 'thanks';\n  }\n  return 'default';\n};\n\n// Get a random response from the appropriate category\nconst getRandomResponse = type => {\n  const responses = RESPONSES[type];\n  return responses[Math.floor(Math.random() * responses.length)];\n};\nexport const sendMessage = async message => {\n  try {\n    // For demo purposes, we'll use local response generation\n    // In a real app, you would call the API here\n    // const response = await axios.post(`${API_URL}/chat`, { message });\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Get response based on message content\n    const responseType = getResponseType(message);\n    const responseText = getRandomResponse(responseType);\n    return {\n      id: Date.now().toString(),\n      content: responseText,\n      sender: 'agent',\n      timestamp: new Date()\n    };\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","RESPONSES","greeting","farewell","thanks","default","getResponseType","message","lowerMessage","toLowerCase","match","getRandomResponse","type","responses","Math","floor","random","length","sendMessage","Promise","resolve","setTimeout","responseType","responseText","id","Date","now","toString","content","sender","timestamp","error","console"],"sources":["C:/Users/Godso/new sic app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Message } from '../types';\r\n\r\nconst API_URL = 'https://sic-agent-app-adg1.onrender.com';\r\n\r\n// Simple response templates for demo purposes\r\nconst RESPONSES = {\r\n  greeting: [\r\n    \"Hello! How can I help you today?\",\r\n    \"Hi there! What can I do for you?\",\r\n    \"Greetings! How may I assist you?\"\r\n  ],\r\n  farewell: [\r\n    \"Goodbye! Have a great day!\",\r\n    \"See you later! Take care!\",\r\n    \"Bye! Feel free to come back if you need more help!\"\r\n  ],\r\n  thanks: [\r\n    \"You're welcome!\",\r\n    \"Glad I could help!\",\r\n    \"My pleasure! Is there anything else you need?\"\r\n  ],\r\n  default: [\r\n    \"I'm not sure I understand. Could you rephrase that?\",\r\n    \"I'm still learning. Could you try asking in a different way?\",\r\n    \"I'm not sure about that. Can you provide more details?\"\r\n  ]\r\n};\r\n\r\n// Simple keyword matching for demo purposes\r\nconst getResponseType = (message: string): keyof typeof RESPONSES => {\r\n  const lowerMessage = message.toLowerCase();\r\n  \r\n  if (lowerMessage.match(/^(hi|hello|hey|greetings)/)) {\r\n    return 'greeting';\r\n  }\r\n  \r\n  if (lowerMessage.match(/^(bye|goodbye|see you|farewell)/)) {\r\n    return 'farewell';\r\n  }\r\n  \r\n  if (lowerMessage.match(/^(thanks|thank you|appreciate it)/)) {\r\n    return 'thanks';\r\n  }\r\n  \r\n  return 'default';\r\n};\r\n\r\n// Get a random response from the appropriate category\r\nconst getRandomResponse = (type: keyof typeof RESPONSES): string => {\r\n  const responses = RESPONSES[type];\r\n  return responses[Math.floor(Math.random() * responses.length)];\r\n};\r\n\r\nexport const sendMessage = async (message: string): Promise<Message> => {\r\n  try {\r\n    // For demo purposes, we'll use local response generation\r\n    // In a real app, you would call the API here\r\n    // const response = await axios.post(`${API_URL}/chat`, { message });\r\n    \r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Get response based on message content\r\n    const responseType = getResponseType(message);\r\n    const responseText = getRandomResponse(responseType);\r\n    \r\n    return {\r\n      id: Date.now().toString(),\r\n      content: responseText,\r\n      sender: 'agent',\r\n      timestamp: new Date(),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAGA,MAAMA,OAAO,GAAG,yCAAyC;;AAEzD;AACA,MAAMC,SAAS,GAAG;EAChBC,QAAQ,EAAE,CACR,kCAAkC,EAClC,kCAAkC,EAClC,kCAAkC,CACnC;EACDC,QAAQ,EAAE,CACR,4BAA4B,EAC5B,2BAA2B,EAC3B,oDAAoD,CACrD;EACDC,MAAM,EAAE,CACN,iBAAiB,EACjB,oBAAoB,EACpB,+CAA+C,CAChD;EACDC,OAAO,EAAE,CACP,qDAAqD,EACrD,8DAA8D,EAC9D,wDAAwD;AAE5D,CAAC;;AAED;AACA,MAAMC,eAAe,GAAIC,OAAe,IAA6B;EACnE,MAAMC,YAAY,GAAGD,OAAO,CAACE,WAAW,CAAC,CAAC;EAE1C,IAAID,YAAY,CAACE,KAAK,CAAC,2BAA2B,CAAC,EAAE;IACnD,OAAO,UAAU;EACnB;EAEA,IAAIF,YAAY,CAACE,KAAK,CAAC,iCAAiC,CAAC,EAAE;IACzD,OAAO,UAAU;EACnB;EAEA,IAAIF,YAAY,CAACE,KAAK,CAAC,mCAAmC,CAAC,EAAE;IAC3D,OAAO,QAAQ;EACjB;EAEA,OAAO,SAAS;AAClB,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAIC,IAA4B,IAAa;EAClE,MAAMC,SAAS,GAAGZ,SAAS,CAACW,IAAI,CAAC;EACjC,OAAOC,SAAS,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,SAAS,CAACI,MAAM,CAAC,CAAC;AAChE,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOX,OAAe,IAAuB;EACtE,IAAI;IACF;IACA;IACA;;IAEA;IACA,MAAM,IAAIY,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,MAAME,YAAY,GAAGhB,eAAe,CAACC,OAAO,CAAC;IAC7C,MAAMgB,YAAY,GAAGZ,iBAAiB,CAACW,YAAY,CAAC;IAEpD,OAAO;MACLE,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,OAAO,EAAEL,YAAY;MACrBM,MAAM,EAAE,OAAO;MACfC,SAAS,EAAE,IAAIL,IAAI,CAAC;IACtB,CAAC;EACH,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}