{"ast":null,"code":"export const suggestionMap = {\n  default: [\"What products do you offer?\", \"How do I pay my premium?\", \"How do I file a claim?\", \"Speak to an agent\", \"Find nearest branch\", \"Check my policy status\"],\n  claims: [\"Track my claim status\", \"Upload claim documents\", \"How long does a claim take?\", \"What documents do I need?\", \"Speak to claims department\", \"Report a new claim\"],\n  payment: [\"View payment options\", \"Set up premium reminder\", \"Make a payment now\", \"Change payment method\", \"Get payment history\", \"Premium due dates\"],\n  products: [\"Tell me about Education Plan Plus\", \"What is Final Journey Plan?\", \"Show me investment plans\", \"Compare life insurance options\", \"Group insurance plans\", \"Loan protection plans\"],\n  agent: [\"Talk to a live agent\", \"Schedule a call back\", \"Chat on WhatsApp\", \"Send an email inquiry\", \"Book branch appointment\", \"Emergency contact\"],\n  branch: [\"Find nearest branch\", \"Branch operating hours\", \"Available branch services\", \"Book branch visit\", \"Get branch directions\", \"Branch contact numbers\"],\n  policy: [\"Check policy status\", \"Update policy details\", \"Add beneficiaries\", \"Policy renewal date\", \"Download policy document\", \"Request policy changes\"]\n};\nexport const getTopicFromSuggestion = suggestion => {\n  const text = suggestion.toLowerCase();\n  if (text.includes('claim')) return 'claims';\n  if (text.includes('payment') || text.includes('premium') || text.includes('pay')) return 'payment';\n  if (text.includes('product') || text.includes('plan') || text.includes('insurance')) return 'products';\n  if (text.includes('agent') || text.includes('speak') || text.includes('talk') || text.includes('contact')) return 'agent';\n  if (text.includes('branch') || text.includes('office') || text.includes('location')) return 'branch';\n  if (text.includes('policy') || text.includes('document')) return 'policy';\n  return 'default';\n};\nexport const getSuggestions = (context = {}) => {\n  const {\n    lastMessage = '',\n    category,\n    activeTopic\n  } = context;\n\n  // If there's an active topic, use it\n  if (activeTopic && suggestionMap[activeTopic]) {\n    return suggestionMap[activeTopic];\n  }\n\n  // Otherwise, try to determine topic from last message\n  if (lastMessage) {\n    const topic = getTopicFromSuggestion(lastMessage);\n    return suggestionMap[topic];\n  }\n\n  // If no context is available, return default suggestions\n  return suggestionMap.default;\n};","map":{"version":3,"names":["suggestionMap","default","claims","payment","products","agent","branch","policy","getTopicFromSuggestion","suggestion","text","toLowerCase","includes","getSuggestions","context","lastMessage","category","activeTopic","topic"],"sources":["C:/Users/Godso/new sic app/src/services/suggestionService.ts"],"sourcesContent":["import { sicLifeKnowledge } from './knowledgeBase';\r\n\r\nexport type SuggestionTopic = 'default' | 'claims' | 'payment' | 'products' | 'agent' | 'branch' | 'policy';\r\n\r\ninterface SuggestionContext {\r\n  lastMessage?: string;\r\n  category?: string;\r\n  activeTopic?: SuggestionTopic;\r\n}\r\n\r\nexport const suggestionMap: Record<SuggestionTopic, string[]> = {\r\n  default: [\r\n    \"What products do you offer?\",\r\n    \"How do I pay my premium?\",\r\n    \"How do I file a claim?\",\r\n    \"Speak to an agent\",\r\n    \"Find nearest branch\",\r\n    \"Check my policy status\"\r\n  ],\r\n  claims: [\r\n    \"Track my claim status\",\r\n    \"Upload claim documents\",\r\n    \"How long does a claim take?\",\r\n    \"What documents do I need?\",\r\n    \"Speak to claims department\",\r\n    \"Report a new claim\"\r\n  ],\r\n  payment: [\r\n    \"View payment options\",\r\n    \"Set up premium reminder\",\r\n    \"Make a payment now\",\r\n    \"Change payment method\",\r\n    \"Get payment history\",\r\n    \"Premium due dates\"\r\n  ],\r\n  products: [\r\n    \"Tell me about Education Plan Plus\",\r\n    \"What is Final Journey Plan?\",\r\n    \"Show me investment plans\",\r\n    \"Compare life insurance options\",\r\n    \"Group insurance plans\",\r\n    \"Loan protection plans\"\r\n  ],\r\n  agent: [\r\n    \"Talk to a live agent\",\r\n    \"Schedule a call back\",\r\n    \"Chat on WhatsApp\",\r\n    \"Send an email inquiry\",\r\n    \"Book branch appointment\",\r\n    \"Emergency contact\"\r\n  ],\r\n  branch: [\r\n    \"Find nearest branch\",\r\n    \"Branch operating hours\",\r\n    \"Available branch services\",\r\n    \"Book branch visit\",\r\n    \"Get branch directions\",\r\n    \"Branch contact numbers\"\r\n  ],\r\n  policy: [\r\n    \"Check policy status\",\r\n    \"Update policy details\",\r\n    \"Add beneficiaries\",\r\n    \"Policy renewal date\",\r\n    \"Download policy document\",\r\n    \"Request policy changes\"\r\n  ]\r\n};\r\n\r\nexport const getTopicFromSuggestion = (suggestion: string): SuggestionTopic => {\r\n  const text = suggestion.toLowerCase();\r\n  \r\n  if (text.includes('claim')) return 'claims';\r\n  if (text.includes('payment') || text.includes('premium') || text.includes('pay')) return 'payment';\r\n  if (text.includes('product') || text.includes('plan') || text.includes('insurance')) return 'products';\r\n  if (text.includes('agent') || text.includes('speak') || text.includes('talk') || text.includes('contact')) return 'agent';\r\n  if (text.includes('branch') || text.includes('office') || text.includes('location')) return 'branch';\r\n  if (text.includes('policy') || text.includes('document')) return 'policy';\r\n  \r\n  return 'default';\r\n};\r\n\r\nexport const getSuggestions = (context: SuggestionContext = {}): string[] => {\r\n  const { lastMessage = '', category, activeTopic } = context;\r\n\r\n  // If there's an active topic, use it\r\n  if (activeTopic && suggestionMap[activeTopic]) {\r\n    return suggestionMap[activeTopic];\r\n  }\r\n\r\n  // Otherwise, try to determine topic from last message\r\n  if (lastMessage) {\r\n    const topic = getTopicFromSuggestion(lastMessage);\r\n    return suggestionMap[topic];\r\n  }\r\n\r\n  // If no context is available, return default suggestions\r\n  return suggestionMap.default;\r\n}; "],"mappings":"AAUA,OAAO,MAAMA,aAAgD,GAAG;EAC9DC,OAAO,EAAE,CACP,6BAA6B,EAC7B,0BAA0B,EAC1B,wBAAwB,EACxB,mBAAmB,EACnB,qBAAqB,EACrB,wBAAwB,CACzB;EACDC,MAAM,EAAE,CACN,uBAAuB,EACvB,wBAAwB,EACxB,6BAA6B,EAC7B,2BAA2B,EAC3B,4BAA4B,EAC5B,oBAAoB,CACrB;EACDC,OAAO,EAAE,CACP,sBAAsB,EACtB,yBAAyB,EACzB,oBAAoB,EACpB,uBAAuB,EACvB,qBAAqB,EACrB,mBAAmB,CACpB;EACDC,QAAQ,EAAE,CACR,mCAAmC,EACnC,6BAA6B,EAC7B,0BAA0B,EAC1B,gCAAgC,EAChC,uBAAuB,EACvB,uBAAuB,CACxB;EACDC,KAAK,EAAE,CACL,sBAAsB,EACtB,sBAAsB,EACtB,kBAAkB,EAClB,uBAAuB,EACvB,yBAAyB,EACzB,mBAAmB,CACpB;EACDC,MAAM,EAAE,CACN,qBAAqB,EACrB,wBAAwB,EACxB,2BAA2B,EAC3B,mBAAmB,EACnB,uBAAuB,EACvB,wBAAwB,CACzB;EACDC,MAAM,EAAE,CACN,qBAAqB,EACrB,uBAAuB,EACvB,mBAAmB,EACnB,qBAAqB,EACrB,0BAA0B,EAC1B,wBAAwB;AAE5B,CAAC;AAED,OAAO,MAAMC,sBAAsB,GAAIC,UAAkB,IAAsB;EAC7E,MAAMC,IAAI,GAAGD,UAAU,CAACE,WAAW,CAAC,CAAC;EAErC,IAAID,IAAI,CAACE,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,QAAQ;EAC3C,IAAIF,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE,OAAO,SAAS;EAClG,IAAIF,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE,OAAO,UAAU;EACtG,IAAIF,IAAI,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,MAAM,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,OAAO;EACzH,IAAIF,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,QAAQ;EACpG,IAAIF,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,IAAI,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,QAAQ;EAEzE,OAAO,SAAS;AAClB,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,OAA0B,GAAG,CAAC,CAAC,KAAe;EAC3E,MAAM;IAAEC,WAAW,GAAG,EAAE;IAAEC,QAAQ;IAAEC;EAAY,CAAC,GAAGH,OAAO;;EAE3D;EACA,IAAIG,WAAW,IAAIjB,aAAa,CAACiB,WAAW,CAAC,EAAE;IAC7C,OAAOjB,aAAa,CAACiB,WAAW,CAAC;EACnC;;EAEA;EACA,IAAIF,WAAW,EAAE;IACf,MAAMG,KAAK,GAAGV,sBAAsB,CAACO,WAAW,CAAC;IACjD,OAAOf,aAAa,CAACkB,KAAK,CAAC;EAC7B;;EAEA;EACA,OAAOlB,aAAa,CAACC,OAAO;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}