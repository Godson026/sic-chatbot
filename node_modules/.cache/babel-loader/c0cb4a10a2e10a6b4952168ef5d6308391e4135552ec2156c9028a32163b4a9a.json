{"ast":null,"code":"export const suggestionMap = {\n  default: [\"What types of insurance does SIC Life offer?\", \"I want help finding the right plan\", \"How do I contact customer service?\", \"Can I pay my premiums online?\", \"I need help with a claim\", \"Find the nearest branch\"],\n  products: [\"What's the difference between life and funeral insurance?\", \"Tell me more about your education savings plans\", \"Which plans are good for long-term investment?\", \"Can I get coverage for my children?\", \"How much does a typical life plan cost?\", \"Do you offer group insurance plans?\"],\n  payment: [\"How do I make a premium payment?\", \"What are the available payment methods?\", \"Can I pay through my bank or mobile money?\", \"I missed a payment. What should I do?\", \"Can I set up auto-deductions from my salary?\", \"Is there a grace period for late premiums?\"],\n  claims: [\"How do I start a claim?\", \"What documents do I need to file a claim?\", \"How long will it take to process my claim?\", \"Can I track my claim status online?\", \"I submitted a claim but haven't heard back\", \"Speak to claims department\"],\n  policy: [\"I want to check my policy details\", \"How can I download my policy document?\", \"What's my current premium balance?\", \"Can I change my beneficiary?\", \"Is my policy still active?\", \"How do I cancel my policy?\"],\n  agent: [\"I'd like to speak to a customer care agent\", \"Where is your nearest branch?\", \"What are your office hours?\", \"Do you have a WhatsApp contact?\", \"Can someone call me back?\", \"Schedule a branch visit\"],\n  other: [\"How can I update my personal information?\", \"What happens if I miss multiple payments?\", \"Is there a grace period for late premiums?\", \"How do I cancel my policy?\", \"Can I have multiple policies?\", \"Tell me about SIC Life\"]\n};\n\n// Keywords and phrases that help identify the topic\nconst topicIdentifiers = {\n  products: ['insurance', 'plan', 'coverage', 'policy types', 'education plan', 'investment', 'funeral', 'group insurance', 'life insurance'],\n  payment: ['pay', 'premium', 'payment', 'bank', 'mobile money', 'auto-deduction', 'salary', 'deduction', 'grace period', 'missed payment', 'balance'],\n  claims: ['claim', 'document', 'process', 'file', 'submit', 'track', 'status', 'compensation', 'benefit'],\n  policy: ['policy', 'details', 'document', 'beneficiary', 'active', 'status', 'cancel', 'download', 'check'],\n  agent: ['agent', 'speak', 'contact', 'branch', 'office', 'whatsapp', 'call', 'customer care', 'representative', 'visit'],\n  other: ['update', 'information', 'personal', 'multiple', 'about', 'company', 'general']\n};\nexport const getTopicFromSuggestion = text => {\n  const lowercaseText = text.toLowerCase();\n\n  // Check each topic's keywords\n  for (const [topic, keywords] of Object.entries(topicIdentifiers)) {\n    if (keywords.some(keyword => lowercaseText.includes(keyword))) {\n      return topic;\n    }\n  }\n  return 'default';\n};\nexport const getSuggestions = (context = {}) => {\n  const {\n    lastMessage = '',\n    category,\n    activeTopic\n  } = context;\n\n  // If there's an active topic, use it\n  if (activeTopic && suggestionMap[activeTopic]) {\n    // Randomly select 4-6 suggestions from the topic to keep it dynamic\n    const suggestions = suggestionMap[activeTopic];\n    const shuffled = [...suggestions].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, Math.floor(Math.random() * 3) + 4); // Returns 4-6 suggestions\n  }\n\n  // Try to determine topic from last message\n  if (lastMessage) {\n    const topic = getTopicFromSuggestion(lastMessage);\n    const suggestions = suggestionMap[topic];\n    const shuffled = [...suggestions].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, Math.floor(Math.random() * 3) + 4);\n  }\n\n  // Return default suggestions\n  return suggestionMap.default;\n};\n\n// Helper function to get related topics based on current topic\nexport const getRelatedTopics = currentTopic => {\n  const topicRelations = {\n    default: ['products', 'agent', 'claims'],\n    products: ['policy', 'payment', 'agent'],\n    payment: ['policy', 'agent', 'other'],\n    claims: ['policy', 'agent', 'payment'],\n    policy: ['payment', 'claims', 'products'],\n    agent: ['claims', 'policy', 'other'],\n    other: ['agent', 'policy', 'products']\n  };\n  return topicRelations[currentTopic] || ['default'];\n};\n\n// Helper function to get next suggestions including some from related topics\nexport const getNextSuggestions = currentTopic => {\n  const relatedTopics = getRelatedTopics(currentTopic);\n  const suggestions = [];\n\n  // Add 3-4 suggestions from current topic\n  const currentTopicSuggestions = [...suggestionMap[currentTopic]].sort(() => Math.random() - 0.5).slice(0, 3);\n  suggestions.push(...currentTopicSuggestions);\n\n  // Add 1-2 suggestions from each related topic\n  relatedTopics.forEach(topic => {\n    const relatedSuggestions = [...suggestionMap[topic]].sort(() => Math.random() - 0.5).slice(0, 1);\n    suggestions.push(...relatedSuggestions);\n  });\n\n  // Shuffle final array and limit to 6 suggestions\n  return suggestions.sort(() => Math.random() - 0.5).slice(0, 6);\n};","map":{"version":3,"names":["suggestionMap","default","products","payment","claims","policy","agent","other","topicIdentifiers","getTopicFromSuggestion","text","lowercaseText","toLowerCase","topic","keywords","Object","entries","some","keyword","includes","getSuggestions","context","lastMessage","category","activeTopic","suggestions","shuffled","sort","Math","random","slice","floor","getRelatedTopics","currentTopic","topicRelations","getNextSuggestions","relatedTopics","currentTopicSuggestions","push","forEach","relatedSuggestions"],"sources":["C:/Users/Godso/new sic app/src/services/suggestionService.ts"],"sourcesContent":["import { sicLifeKnowledge } from './knowledgeBase';\r\n\r\nexport type SuggestionTopic = \r\n  | 'default' \r\n  | 'products' \r\n  | 'payment' \r\n  | 'claims' \r\n  | 'policy' \r\n  | 'agent' \r\n  | 'other';\r\n\r\ninterface SuggestionContext {\r\n  lastMessage?: string;\r\n  category?: string;\r\n  activeTopic?: SuggestionTopic;\r\n}\r\n\r\nexport const suggestionMap: Record<SuggestionTopic, string[]> = {\r\n  default: [\r\n    \"What types of insurance does SIC Life offer?\",\r\n    \"I want help finding the right plan\",\r\n    \"How do I contact customer service?\",\r\n    \"Can I pay my premiums online?\",\r\n    \"I need help with a claim\",\r\n    \"Find the nearest branch\"\r\n  ],\r\n  products: [\r\n    \"What's the difference between life and funeral insurance?\",\r\n    \"Tell me more about your education savings plans\",\r\n    \"Which plans are good for long-term investment?\",\r\n    \"Can I get coverage for my children?\",\r\n    \"How much does a typical life plan cost?\",\r\n    \"Do you offer group insurance plans?\"\r\n  ],\r\n  payment: [\r\n    \"How do I make a premium payment?\",\r\n    \"What are the available payment methods?\",\r\n    \"Can I pay through my bank or mobile money?\",\r\n    \"I missed a payment. What should I do?\",\r\n    \"Can I set up auto-deductions from my salary?\",\r\n    \"Is there a grace period for late premiums?\"\r\n  ],\r\n  claims: [\r\n    \"How do I start a claim?\",\r\n    \"What documents do I need to file a claim?\",\r\n    \"How long will it take to process my claim?\",\r\n    \"Can I track my claim status online?\",\r\n    \"I submitted a claim but haven't heard back\",\r\n    \"Speak to claims department\"\r\n  ],\r\n  policy: [\r\n    \"I want to check my policy details\",\r\n    \"How can I download my policy document?\",\r\n    \"What's my current premium balance?\",\r\n    \"Can I change my beneficiary?\",\r\n    \"Is my policy still active?\",\r\n    \"How do I cancel my policy?\"\r\n  ],\r\n  agent: [\r\n    \"I'd like to speak to a customer care agent\",\r\n    \"Where is your nearest branch?\",\r\n    \"What are your office hours?\",\r\n    \"Do you have a WhatsApp contact?\",\r\n    \"Can someone call me back?\",\r\n    \"Schedule a branch visit\"\r\n  ],\r\n  other: [\r\n    \"How can I update my personal information?\",\r\n    \"What happens if I miss multiple payments?\",\r\n    \"Is there a grace period for late premiums?\",\r\n    \"How do I cancel my policy?\",\r\n    \"Can I have multiple policies?\",\r\n    \"Tell me about SIC Life\"\r\n  ]\r\n};\r\n\r\n// Keywords and phrases that help identify the topic\r\nconst topicIdentifiers = {\r\n  products: [\r\n    'insurance', 'plan', 'coverage', 'policy types', 'education plan',\r\n    'investment', 'funeral', 'group insurance', 'life insurance'\r\n  ],\r\n  payment: [\r\n    'pay', 'premium', 'payment', 'bank', 'mobile money', 'auto-deduction',\r\n    'salary', 'deduction', 'grace period', 'missed payment', 'balance'\r\n  ],\r\n  claims: [\r\n    'claim', 'document', 'process', 'file', 'submit', 'track',\r\n    'status', 'compensation', 'benefit'\r\n  ],\r\n  policy: [\r\n    'policy', 'details', 'document', 'beneficiary', 'active',\r\n    'status', 'cancel', 'download', 'check'\r\n  ],\r\n  agent: [\r\n    'agent', 'speak', 'contact', 'branch', 'office', 'whatsapp',\r\n    'call', 'customer care', 'representative', 'visit'\r\n  ],\r\n  other: [\r\n    'update', 'information', 'personal', 'multiple', 'about',\r\n    'company', 'general'\r\n  ]\r\n};\r\n\r\nexport const getTopicFromSuggestion = (text: string): SuggestionTopic => {\r\n  const lowercaseText = text.toLowerCase();\r\n\r\n  // Check each topic's keywords\r\n  for (const [topic, keywords] of Object.entries(topicIdentifiers)) {\r\n    if (keywords.some(keyword => lowercaseText.includes(keyword))) {\r\n      return topic as SuggestionTopic;\r\n    }\r\n  }\r\n\r\n  return 'default';\r\n};\r\n\r\nexport const getSuggestions = (context: SuggestionContext = {}): string[] => {\r\n  const { lastMessage = '', category, activeTopic } = context;\r\n\r\n  // If there's an active topic, use it\r\n  if (activeTopic && suggestionMap[activeTopic]) {\r\n    // Randomly select 4-6 suggestions from the topic to keep it dynamic\r\n    const suggestions = suggestionMap[activeTopic];\r\n    const shuffled = [...suggestions].sort(() => Math.random() - 0.5);\r\n    return shuffled.slice(0, Math.floor(Math.random() * 3) + 4); // Returns 4-6 suggestions\r\n  }\r\n\r\n  // Try to determine topic from last message\r\n  if (lastMessage) {\r\n    const topic = getTopicFromSuggestion(lastMessage);\r\n    const suggestions = suggestionMap[topic];\r\n    const shuffled = [...suggestions].sort(() => Math.random() - 0.5);\r\n    return shuffled.slice(0, Math.floor(Math.random() * 3) + 4);\r\n  }\r\n\r\n  // Return default suggestions\r\n  return suggestionMap.default;\r\n};\r\n\r\n// Helper function to get related topics based on current topic\r\nexport const getRelatedTopics = (currentTopic: SuggestionTopic): SuggestionTopic[] => {\r\n  const topicRelations: Record<SuggestionTopic, SuggestionTopic[]> = {\r\n    default: ['products', 'agent', 'claims'],\r\n    products: ['policy', 'payment', 'agent'],\r\n    payment: ['policy', 'agent', 'other'],\r\n    claims: ['policy', 'agent', 'payment'],\r\n    policy: ['payment', 'claims', 'products'],\r\n    agent: ['claims', 'policy', 'other'],\r\n    other: ['agent', 'policy', 'products']\r\n  };\r\n\r\n  return topicRelations[currentTopic] || ['default'];\r\n};\r\n\r\n// Helper function to get next suggestions including some from related topics\r\nexport const getNextSuggestions = (currentTopic: SuggestionTopic): string[] => {\r\n  const relatedTopics = getRelatedTopics(currentTopic);\r\n  const suggestions: string[] = [];\r\n\r\n  // Add 3-4 suggestions from current topic\r\n  const currentTopicSuggestions = [...suggestionMap[currentTopic]]\r\n    .sort(() => Math.random() - 0.5)\r\n    .slice(0, 3);\r\n  suggestions.push(...currentTopicSuggestions);\r\n\r\n  // Add 1-2 suggestions from each related topic\r\n  relatedTopics.forEach(topic => {\r\n    const relatedSuggestions = [...suggestionMap[topic]]\r\n      .sort(() => Math.random() - 0.5)\r\n      .slice(0, 1);\r\n    suggestions.push(...relatedSuggestions);\r\n  });\r\n\r\n  // Shuffle final array and limit to 6 suggestions\r\n  return suggestions\r\n    .sort(() => Math.random() - 0.5)\r\n    .slice(0, 6);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}