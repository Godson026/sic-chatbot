{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import Message from'./components/Message';import Avatar from'./components/Avatar';import{processMessage}from'./services/api';import SuggestedQuestions from'./components/SuggestedQuestions';import{getSuggestions,getTopicFromSuggestion}from'./services/suggestionService';// Chatbot name\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CHATBOT_NAME=\"Wofa Ahoto\";// Suggested responses based on conversation state\nconst getSuggestedResponses=messages=>{if(messages.length===0)return[];const lastMessage=messages[messages.length-1];// If the last message is from the agent, suggest responses based on its content\nif(lastMessage.sender==='agent'){const content=lastMessage.content.toLowerCase();if(content.includes('how can i help')){return[\"I need an insurance quote\",\"How do I make a claim?\",\"Check my policy status\",\"Make a payment\"];}if(content.includes('quote')){return[\"Tell me about life insurance\",\"What's the minimum coverage?\",\"How much does it cost?\",\"What documents do I need?\"];}if(content.includes('claim')){return[\"Start a new claim\",\"Track my claim status\",\"Required documents\",\"Speak to an agent\"];}if(content.includes('payment')){return[\"Pay with Mobile Money\",\"Pay with card\",\"Bank transfer details\",\"Payment due date\"];}}// Default suggestions\nreturn[\"Get an insurance quote\",\"File a claim\",\"Make a payment\",\"Contact support\"];};function App(){const[messages,setMessages]=useState([]);const[inputMessage,setInputMessage]=useState('');const[isLoading,setIsLoading]=useState(false);const[botState,setBotState]=useState('idle');const messagesEndRef=useRef(null);const[suggestedResponses,setSuggestedResponses]=useState([]);const[activeTopic,setActiveTopic]=useState('default');const[suggestions,setSuggestions]=useState([]);const[showSuggestions,setShowSuggestions]=useState(true);// Add welcome message when component mounts\nuseEffect(()=>{const welcomeMessage={id:Date.now().toString(),content:`Hello! I'm ${CHATBOT_NAME}, your SIC Life insurance assistant. How can I help you today?\\n\\nI can help you with:\\n• Insurance quotes\\n• Claims processing\\n• Policy information\\n• Premium payments\\n• General inquiries`,sender:'agent',timestamp:new Date(),type:'text'};setMessages([welcomeMessage]);},[]);// Update suggested responses when messages change\nuseEffect(()=>{setSuggestedResponses(getSuggestedResponses(messages));},[messages]);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};useEffect(()=>{scrollToBottom();},[messages]);// Initialize suggestions\nuseEffect(()=>{setSuggestions(getSuggestions({activeTopic:'default'}));},[]);const handleSendMessage=async function(){let messageText=arguments.length>0&&arguments[0]!==undefined?arguments[0]:inputMessage;if(!messageText.trim())return;// Hide suggestions while processing\nsetShowSuggestions(false);const userMessage={id:Date.now().toString(),content:messageText,sender:'user',timestamp:new Date(),type:'text'};setMessages(prev=>[...prev,userMessage]);setInputMessage('');setBotState('typing');try{const agentMessage=await processMessage(messageText);setMessages(prev=>[...prev,agentMessage]);// Update suggestions based on the bot's response\nconst newTopic=getTopicFromSuggestion(agentMessage.content);// Add a delay for natural feel\nsetTimeout(()=>{setActiveTopic(newTopic);setSuggestions(getSuggestions({lastMessage:agentMessage.content,activeTopic:newTopic}));setShowSuggestions(true);},500);}catch(error){console.error('Error processing message:',error);const errorMessage={id:Date.now().toString(),content:'Sorry, there was an error processing your message. Please try again.',sender:'agent',timestamp:new Date(),type:'text'};setMessages(prev=>[...prev,errorMessage]);setShowSuggestions(true);}finally{setBotState('idle');}};const handleSuggestionClick=suggestion=>{// Hide current suggestions immediately\nsetShowSuggestions(false);// Send the message\nhandleSendMessage(suggestion);// Update the topic based on the suggestion\nconst newTopic=getTopicFromSuggestion(suggestion);// Update suggestions with a delay for natural feel\nsetTimeout(()=>{setActiveTopic(newTopic);setSuggestions(getSuggestions({activeTopic:newTopic}));setShowSuggestions(true);},300);};const renderBotState=()=>{if(botState==='idle')return null;return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2 mb-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-8 h-8\",children:/*#__PURE__*/_jsx(Avatar,{})}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-100 rounded-lg px-4 py-2\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-sm text-gray-500 mr-2\",children:\"Agent is typing\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-2 h-2 sic-bg-primary rounded-full animate-bounce\",style:{animationDelay:'0ms'}}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2 h-2 sic-bg-primary rounded-full animate-bounce\",style:{animationDelay:'150ms'}}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2 h-2 sic-bg-primary rounded-full animate-bounce\",style:{animationDelay:'300ms'}})]})]})})]});};return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gray-100\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-4xl mx-auto p-4\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"sic-bg-primary shadow-sm rounded-lg p-4 mb-4 flex items-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-10 h-10 mr-3\",children:/*#__PURE__*/_jsx(Avatar,{})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-bold text-white\",children:CHATBOT_NAME}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm text-white opacity-80\",children:\"Your SIC Life Assistant\"})]})]}),/*#__PURE__*/_jsxs(\"main\",{className:\"bg-white rounded-lg shadow-sm p-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"h-[600px] overflow-y-auto mb-4 p-4 border rounded-lg bg-gray-50\",children:[messages.map(message=>/*#__PURE__*/_jsx(Message,{message:message},message.id)),renderBotState(),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col gap-4\",children:[showSuggestions&&/*#__PURE__*/_jsx(SuggestedQuestions,{suggestions:suggestions,onSuggestionClick:handleSuggestionClick,isLoading:botState==='typing'}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-2\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputMessage,onChange:e=>setInputMessage(e.target.value),onKeyPress:e=>e.key==='Enter'&&handleSendMessage(),placeholder:\"Type your message...\",className:\"flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500\",disabled:botState==='typing'}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleSendMessage(),disabled:botState==='typing'||!inputMessage.trim(),className:\"p-2 bg-green-500 text-white rounded-lg disabled:opacity-50\",children:\"Send\"})]})]})]}),/*#__PURE__*/_jsx(\"footer\",{className:\"mt-4 text-center text-sm text-gray-500\",children:/*#__PURE__*/_jsxs(\"p\",{children:[CHATBOT_NAME,\" - Your trusted SIC Life insurance assistant\"]})})]})});}export default App;","map":{"version":3,"names":["React","useState","useRef","useEffect","Message","Avatar","processMessage","SuggestedQuestions","getSuggestions","getTopicFromSuggestion","jsx","_jsx","jsxs","_jsxs","CHATBOT_NAME","getSuggestedResponses","messages","length","lastMessage","sender","content","toLowerCase","includes","App","setMessages","inputMessage","setInputMessage","isLoading","setIsLoading","botState","setBotState","messagesEndRef","suggestedResponses","setSuggestedResponses","activeTopic","setActiveTopic","suggestions","setSuggestions","showSuggestions","setShowSuggestions","welcomeMessage","id","Date","now","toString","timestamp","type","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","messageText","arguments","undefined","trim","userMessage","prev","agentMessage","newTopic","setTimeout","error","console","errorMessage","handleSuggestionClick","suggestion","renderBotState","className","children","style","animationDelay","map","message","ref","onSuggestionClick","value","onChange","e","target","onKeyPress","key","placeholder","disabled","onClick"],"sources":["C:/Users/Godso/new sic app/src/App.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { PaperAirplaneIcon } from '@heroicons/react/24/solid';\nimport Message from './components/Message';\nimport SuggestedResponses from './components/SuggestedResponses';\nimport Avatar from './components/Avatar';\nimport { Message as MessageType } from './types';\nimport { processMessage } from './services/api';\nimport SuggestedQuestions from './components/SuggestedQuestions';\nimport { getSuggestions, getTopicFromSuggestion, type SuggestionTopic } from './services/suggestionService';\n\n// Chatbot name\nconst CHATBOT_NAME = \"Wofa Ahoto\";\n\n// Suggested responses based on conversation state\nconst getSuggestedResponses = (messages: MessageType[]): string[] => {\n  if (messages.length === 0) return [];\n  \n  const lastMessage = messages[messages.length - 1];\n  \n  // If the last message is from the agent, suggest responses based on its content\n  if (lastMessage.sender === 'agent') {\n    const content = lastMessage.content.toLowerCase();\n    \n    if (content.includes('how can i help')) {\n      return [\n        \"I need an insurance quote\",\n        \"How do I make a claim?\",\n        \"Check my policy status\",\n        \"Make a payment\"\n      ];\n    }\n    \n    if (content.includes('quote')) {\n      return [\n        \"Tell me about life insurance\",\n        \"What's the minimum coverage?\",\n        \"How much does it cost?\",\n        \"What documents do I need?\"\n      ];\n    }\n    \n    if (content.includes('claim')) {\n      return [\n        \"Start a new claim\",\n        \"Track my claim status\",\n        \"Required documents\",\n        \"Speak to an agent\"\n      ];\n    }\n\n    if (content.includes('payment')) {\n      return [\n        \"Pay with Mobile Money\",\n        \"Pay with card\",\n        \"Bank transfer details\",\n        \"Payment due date\"\n      ];\n    }\n  }\n  \n  // Default suggestions\n  return [\n    \"Get an insurance quote\",\n    \"File a claim\",\n    \"Make a payment\",\n    \"Contact support\"\n  ];\n};\n\nfunction App() {\n  const [messages, setMessages] = useState<MessageType[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [botState, setBotState] = useState<'idle' | 'typing'>('idle');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [suggestedResponses, setSuggestedResponses] = useState<string[]>([]);\n  const [activeTopic, setActiveTopic] = useState<SuggestionTopic>('default');\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(true);\n\n  // Add welcome message when component mounts\n  useEffect(() => {\n    const welcomeMessage: MessageType = {\n      id: Date.now().toString(),\n      content: `Hello! I'm ${CHATBOT_NAME}, your SIC Life insurance assistant. How can I help you today?\\n\\nI can help you with:\\n• Insurance quotes\\n• Claims processing\\n• Policy information\\n• Premium payments\\n• General inquiries`,\n      sender: 'agent',\n      timestamp: new Date(),\n      type: 'text'\n    };\n    setMessages([welcomeMessage]);\n  }, []);\n\n  // Update suggested responses when messages change\n  useEffect(() => {\n    setSuggestedResponses(getSuggestedResponses(messages));\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Initialize suggestions\n  useEffect(() => {\n    setSuggestions(getSuggestions({ activeTopic: 'default' }));\n  }, []);\n\n  const handleSendMessage = async (messageText: string = inputMessage) => {\n    if (!messageText.trim()) return;\n\n    // Hide suggestions while processing\n    setShowSuggestions(false);\n\n    const userMessage: MessageType = {\n      id: Date.now().toString(),\n      content: messageText,\n      sender: 'user',\n      timestamp: new Date(),\n      type: 'text'\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setBotState('typing');\n\n    try {\n      const agentMessage = await processMessage(messageText);\n      setMessages(prev => [...prev, agentMessage]);\n\n      // Update suggestions based on the bot's response\n      const newTopic = getTopicFromSuggestion(agentMessage.content);\n      \n      // Add a delay for natural feel\n      setTimeout(() => {\n        setActiveTopic(newTopic);\n        setSuggestions(getSuggestions({ \n          lastMessage: agentMessage.content,\n          activeTopic: newTopic\n        }));\n        setShowSuggestions(true);\n      }, 500);\n\n    } catch (error) {\n      console.error('Error processing message:', error);\n      const errorMessage: MessageType = {\n        id: Date.now().toString(),\n        content: 'Sorry, there was an error processing your message. Please try again.',\n        sender: 'agent',\n        timestamp: new Date(),\n        type: 'text'\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      setShowSuggestions(true);\n    } finally {\n      setBotState('idle');\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    // Hide current suggestions immediately\n    setShowSuggestions(false);\n    \n    // Send the message\n    handleSendMessage(suggestion);\n    \n    // Update the topic based on the suggestion\n    const newTopic = getTopicFromSuggestion(suggestion);\n    \n    // Update suggestions with a delay for natural feel\n    setTimeout(() => {\n      setActiveTopic(newTopic);\n      setSuggestions(getSuggestions({ activeTopic: newTopic }));\n      setShowSuggestions(true);\n    }, 300);\n  };\n\n  const renderBotState = () => {\n    if (botState === 'idle') return null;\n    \n    return (\n      <div className=\"flex items-center gap-2 mb-4\">\n        <div className=\"w-8 h-8\">\n          <Avatar />\n        </div>\n        <div className=\"bg-gray-100 rounded-lg px-4 py-2\">\n          <div className=\"flex items-center\">\n            <span className=\"text-sm text-gray-500 mr-2\">Agent is typing</span>\n            <div className=\"flex space-x-1\">\n              <div className=\"w-2 h-2 sic-bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n              <div className=\"w-2 h-2 sic-bg-primary rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n              <div className=\"w-2 h-2 sic-bg-primary rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <div className=\"max-w-4xl mx-auto p-4\">\n        <header className=\"sic-bg-primary shadow-sm rounded-lg p-4 mb-4 flex items-center\">\n          <div className=\"w-10 h-10 mr-3\">\n            <Avatar />\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">{CHATBOT_NAME}</h1>\n            <p className=\"text-sm text-white opacity-80\">Your SIC Life Assistant</p>\n          </div>\n        </header>\n        \n        <main className=\"bg-white rounded-lg shadow-sm p-4\">\n          <div className=\"h-[600px] overflow-y-auto mb-4 p-4 border rounded-lg bg-gray-50\">\n            {messages.map(message => (\n              <Message key={message.id} message={message} />\n            ))}\n            {renderBotState()}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          <div className=\"flex flex-col gap-4\">\n            {showSuggestions && (\n              <SuggestedQuestions\n                suggestions={suggestions}\n                onSuggestionClick={handleSuggestionClick}\n                isLoading={botState === 'typing'}\n              />\n            )}\n\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                placeholder=\"Type your message...\"\n                className=\"flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500\"\n                disabled={botState === 'typing'}\n              />\n              <button \n                onClick={() => handleSendMessage()}\n                disabled={botState === 'typing' || !inputMessage.trim()}\n                className=\"p-2 bg-green-500 text-white rounded-lg disabled:opacity-50\"\n              >\n                Send\n              </button>\n            </div>\n          </div>\n        </main>\n        \n        <footer className=\"mt-4 text-center text-sm text-gray-500\">\n          <p>{CHATBOT_NAME} - Your trusted SIC Life insurance assistant</p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}