{"ast":null,"code":"import Fuse from 'fuse.js';\nimport { responseMap } from './responseService';\n\n// Interface for search items\n\n// Convert responseMap keys to SearchItems with aliases\nconst searchItems = Object.keys(responseMap).map(key => ({\n  key,\n  aliases: getAliases(key),\n  category: getCategoryFromKey(key)\n}));\n\n// Fuse.js options for optimal fuzzy matching\nconst fuseOptions = {\n  includeScore: true,\n  threshold: 0.4,\n  keys: [{\n    name: 'key',\n    weight: 0.3\n  }, {\n    name: 'aliases',\n    weight: 0.5\n  }, {\n    name: 'category',\n    weight: 0.2\n  }],\n  // Increase token length for better matching of Ghanaian phrases\n  minMatchCharLength: 3,\n  // Allow for transpositions (common in typing errors)\n  distance: 100\n};\n\n// Initialize Fuse instance\nconst fuse = new Fuse(searchItems, fuseOptions);\n\n// Clean and normalize input text\nfunction normalizeInput(input) {\n  return input.toLowerCase().replace(/[^\\w\\s]/gi, '') // Remove special characters\n  .replace(/\\s+/g, ' ') // Normalize spaces\n  .trim();\n}\n\n// Get aliases for a response key (including Ghana-specific terms)\nfunction getAliases(key) {\n  const commonAliases = {\n    'claims_process': ['make claim', 'file claim', 'claim process', 'claim procedure', 'death claim', 'accident claim', 'maturity claim', 'how to claim', 'claim money', 'insurance claim'],\n    'payment_methods': ['pay premium', 'payment options', 'how to pay', 'momo payment', 'mobile money', 'bank payment', 'pay insurance', 'premium payment', 'salary deduction', 'standing order'],\n    'education_plan': ['school fees', 'education policy', 'child education', 'study plan', 'university cover', 'education insurance', 'school insurance', 'child plan', 'education savings', 'academic plan'],\n    'investment_returns': ['investment plans', 'returns', 'interest rate', 'investment benefits', 'profit', 'investment options', 'savings plan', 'investment policy', 'growth', 'investment returns'],\n    'policy_updates': ['update policy', 'change policy', 'modify policy', 'policy changes', 'policy information', 'policy details', 'check policy', 'policy status', 'policy document', 'insurance details'],\n    'branch_locations': ['office location', 'branch office', 'find branch', 'nearest office', 'branch address', 'where located', 'directions', 'head office', 'regional office', 'branch contacts']\n  };\n  return commonAliases[key] || [];\n}\n\n// Get category from key\nfunction getCategoryFromKey(key) {\n  if (key.includes('claim')) return 'claims';\n  if (key.includes('payment')) return 'payments';\n  if (key.includes('education')) return 'education';\n  if (key.includes('investment')) return 'investments';\n  if (key.includes('policy')) return 'policy';\n  if (key.includes('branch')) return 'branches';\n  return 'general';\n}\n\n// Find best matching response key\nexport function findBestResponseKey(userInput) {\n  const normalizedInput = normalizeInput(userInput);\n\n  // Log for debugging\n  console.log(`Normalized input: \"${normalizedInput}\"`);\n  const results = fuse.search(normalizedInput);\n\n  // Log search results for debugging\n  console.log('Fuzzy search results:', results.map(r => ({\n    key: r.item.key,\n    score: r.score\n  })));\n\n  // Return the best match if score is good enough\n  if (results.length > 0 && results[0].score && results[0].score < 0.4) {\n    return results[0].item.key;\n  }\n  return null;\n}\n\n// Get related topics based on the matched key\nexport function getRelatedTopics(matchedKey) {\n  const categoryMap = {\n    claims: ['policy_updates', 'branch_locations'],\n    payments: ['policy_updates', 'branch_locations'],\n    education: ['investment_returns', 'payment_methods'],\n    investments: ['education_plan', 'policy_updates'],\n    policy: ['claims_process', 'payment_methods'],\n    branches: ['claims_process', 'policy_updates']\n  };\n  const category = getCategoryFromKey(matchedKey);\n  return categoryMap[category] || [];\n}\n\n// Get confidence level of the match\nexport function getMatchConfidence(matchedKey, userInput) {\n  const results = fuse.search(normalizeInput(userInput));\n  return results.length > 0 && results[0].item.key === matchedKey ? 1 - (results[0].score || 0) : 0;\n}","map":{"version":3,"names":["Fuse","responseMap","searchItems","Object","keys","map","key","aliases","getAliases","category","getCategoryFromKey","fuseOptions","includeScore","threshold","name","weight","minMatchCharLength","distance","fuse","normalizeInput","input","toLowerCase","replace","trim","commonAliases","includes","findBestResponseKey","userInput","normalizedInput","console","log","results","search","r","item","score","length","getRelatedTopics","matchedKey","categoryMap","claims","payments","education","investments","policy","branches","getMatchConfidence"],"sources":["C:/Users/Godso/new sic app/src/services/fuzzyMatcher.ts"],"sourcesContent":["import Fuse from 'fuse.js';\r\nimport { responseMap } from './responseService';\r\n\r\n// Interface for search items\r\ninterface SearchItem {\r\n  key: string;\r\n  aliases: string[];\r\n  category: string;\r\n}\r\n\r\n// Convert responseMap keys to SearchItems with aliases\r\nconst searchItems: SearchItem[] = Object.keys(responseMap).map(key => ({\r\n  key,\r\n  aliases: getAliases(key),\r\n  category: getCategoryFromKey(key)\r\n}));\r\n\r\n// Fuse.js options for optimal fuzzy matching\r\nconst fuseOptions = {\r\n  includeScore: true,\r\n  threshold: 0.4,\r\n  keys: [\r\n    { name: 'key', weight: 0.3 },\r\n    { name: 'aliases', weight: 0.5 },\r\n    { name: 'category', weight: 0.2 }\r\n  ],\r\n  // Increase token length for better matching of Ghanaian phrases\r\n  minMatchCharLength: 3,\r\n  // Allow for transpositions (common in typing errors)\r\n  distance: 100\r\n};\r\n\r\n// Initialize Fuse instance\r\nconst fuse = new Fuse(searchItems, fuseOptions);\r\n\r\n// Clean and normalize input text\r\nfunction normalizeInput(input: string): string {\r\n  return input\r\n    .toLowerCase()\r\n    .replace(/[^\\w\\s]/gi, '') // Remove special characters\r\n    .replace(/\\s+/g, ' ')     // Normalize spaces\r\n    .trim();\r\n}\r\n\r\n// Get aliases for a response key (including Ghana-specific terms)\r\nfunction getAliases(key: string): string[] {\r\n  const commonAliases: Record<string, string[]> = {\r\n    'claims_process': [\r\n      'make claim', 'file claim', 'claim process', 'claim procedure',\r\n      'death claim', 'accident claim', 'maturity claim',\r\n      'how to claim', 'claim money', 'insurance claim'\r\n    ],\r\n    'payment_methods': [\r\n      'pay premium', 'payment options', 'how to pay', 'momo payment',\r\n      'mobile money', 'bank payment', 'pay insurance',\r\n      'premium payment', 'salary deduction', 'standing order'\r\n    ],\r\n    'education_plan': [\r\n      'school fees', 'education policy', 'child education', 'study plan',\r\n      'university cover', 'education insurance', 'school insurance',\r\n      'child plan', 'education savings', 'academic plan'\r\n    ],\r\n    'investment_returns': [\r\n      'investment plans', 'returns', 'interest rate', 'investment benefits',\r\n      'profit', 'investment options', 'savings plan',\r\n      'investment policy', 'growth', 'investment returns'\r\n    ],\r\n    'policy_updates': [\r\n      'update policy', 'change policy', 'modify policy', 'policy changes',\r\n      'policy information', 'policy details', 'check policy',\r\n      'policy status', 'policy document', 'insurance details'\r\n    ],\r\n    'branch_locations': [\r\n      'office location', 'branch office', 'find branch', 'nearest office',\r\n      'branch address', 'where located', 'directions',\r\n      'head office', 'regional office', 'branch contacts'\r\n    ]\r\n  };\r\n\r\n  return commonAliases[key] || [];\r\n}\r\n\r\n// Get category from key\r\nfunction getCategoryFromKey(key: string): string {\r\n  if (key.includes('claim')) return 'claims';\r\n  if (key.includes('payment')) return 'payments';\r\n  if (key.includes('education')) return 'education';\r\n  if (key.includes('investment')) return 'investments';\r\n  if (key.includes('policy')) return 'policy';\r\n  if (key.includes('branch')) return 'branches';\r\n  return 'general';\r\n}\r\n\r\n// Find best matching response key\r\nexport function findBestResponseKey(userInput: string): string | null {\r\n  const normalizedInput = normalizeInput(userInput);\r\n  \r\n  // Log for debugging\r\n  console.log(`Normalized input: \"${normalizedInput}\"`);\r\n  \r\n  const results = fuse.search(normalizedInput);\r\n  \r\n  // Log search results for debugging\r\n  console.log('Fuzzy search results:', results.map(r => ({\r\n    key: r.item.key,\r\n    score: r.score\r\n  })));\r\n  \r\n  // Return the best match if score is good enough\r\n  if (results.length > 0 && results[0].score && results[0].score < 0.4) {\r\n    return results[0].item.key;\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n// Get related topics based on the matched key\r\nexport function getRelatedTopics(matchedKey: string): string[] {\r\n  const categoryMap: Record<string, string[]> = {\r\n    claims: ['policy_updates', 'branch_locations'],\r\n    payments: ['policy_updates', 'branch_locations'],\r\n    education: ['investment_returns', 'payment_methods'],\r\n    investments: ['education_plan', 'policy_updates'],\r\n    policy: ['claims_process', 'payment_methods'],\r\n    branches: ['claims_process', 'policy_updates']\r\n  };\r\n\r\n  const category = getCategoryFromKey(matchedKey);\r\n  return categoryMap[category] || [];\r\n}\r\n\r\n// Get confidence level of the match\r\nexport function getMatchConfidence(matchedKey: string, userInput: string): number {\r\n  const results = fuse.search(normalizeInput(userInput));\r\n  return results.length > 0 && results[0].item.key === matchedKey ? \r\n    1 - (results[0].score || 0) : 0;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}