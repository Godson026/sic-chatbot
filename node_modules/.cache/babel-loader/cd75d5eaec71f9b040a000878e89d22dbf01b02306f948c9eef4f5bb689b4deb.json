{"ast":null,"code":"const defaultSuggestions = [\"What products do you offer?\", \"How do I pay my premium?\", \"How do I check my policy?\", \"Start a new claim\", \"Speak to an agent\", \"Download my documents\"];\nconst productSuggestions = [\"Tell me about Education Plan Plus\", \"What is Final Journey Plan?\", \"Explain GES Group Life Policy\", \"Tell me about Group Security Plan\", \"What is Loan Protector Policy?\", \"Tell me about Keyman Assurance\"];\nconst claimsSuggestions = [\"How do I file a claim?\", \"What documents do I need?\", \"Check my claim status\", \"Speak to claims department\", \"Download claim forms\", \"Track my claim\"];\nconst branchSuggestions = [\"Find nearest branch\", \"Branch operating hours\", \"Branch services\", \"Contact branch\", \"Schedule branch visit\", \"Branch directions\"];\nconst agentSuggestions = [\"Connect me to an agent\", \"Schedule agent call\", \"WhatsApp support\", \"Live chat support\", \"Agent availability\", \"Emergency contact\"];\nexport const getSuggestions = (context = {}) => {\n  const {\n    lastMessage = '',\n    category,\n    subcategory\n  } = context;\n\n  // Check for product-related context\n  if (lastMessage.toLowerCase().includes('product') || lastMessage.toLowerCase().includes('plan') || lastMessage.toLowerCase().includes('policy')) {\n    return productSuggestions;\n  }\n\n  // Check for claims-related context\n  if (lastMessage.toLowerCase().includes('claim') || lastMessage.toLowerCase().includes('document') || category === 'Claims') {\n    return claimsSuggestions;\n  }\n\n  // Check for branch-related context\n  if (lastMessage.toLowerCase().includes('branch') || lastMessage.toLowerCase().includes('location') || lastMessage.toLowerCase().includes('office')) {\n    return branchSuggestions;\n  }\n\n  // Check for agent-related context\n  if (lastMessage.toLowerCase().includes('agent') || lastMessage.toLowerCase().includes('human') || lastMessage.toLowerCase().includes('support')) {\n    return agentSuggestions;\n  }\n\n  // Return default suggestions if no specific context is matched\n  return defaultSuggestions;\n};","map":{"version":3,"names":["defaultSuggestions","productSuggestions","claimsSuggestions","branchSuggestions","agentSuggestions","getSuggestions","context","lastMessage","category","subcategory","toLowerCase","includes"],"sources":["C:/Users/Godso/new sic app/src/services/suggestionService.ts"],"sourcesContent":["import { sicLifeKnowledge } from './knowledgeBase';\r\n\r\ninterface SuggestionContext {\r\n  lastMessage?: string;\r\n  category?: string;\r\n  subcategory?: string;\r\n}\r\n\r\nconst defaultSuggestions = [\r\n  \"What products do you offer?\",\r\n  \"How do I pay my premium?\",\r\n  \"How do I check my policy?\",\r\n  \"Start a new claim\",\r\n  \"Speak to an agent\",\r\n  \"Download my documents\"\r\n];\r\n\r\nconst productSuggestions = [\r\n  \"Tell me about Education Plan Plus\",\r\n  \"What is Final Journey Plan?\",\r\n  \"Explain GES Group Life Policy\",\r\n  \"Tell me about Group Security Plan\",\r\n  \"What is Loan Protector Policy?\",\r\n  \"Tell me about Keyman Assurance\"\r\n];\r\n\r\nconst claimsSuggestions = [\r\n  \"How do I file a claim?\",\r\n  \"What documents do I need?\",\r\n  \"Check my claim status\",\r\n  \"Speak to claims department\",\r\n  \"Download claim forms\",\r\n  \"Track my claim\"\r\n];\r\n\r\nconst branchSuggestions = [\r\n  \"Find nearest branch\",\r\n  \"Branch operating hours\",\r\n  \"Branch services\",\r\n  \"Contact branch\",\r\n  \"Schedule branch visit\",\r\n  \"Branch directions\"\r\n];\r\n\r\nconst agentSuggestions = [\r\n  \"Connect me to an agent\",\r\n  \"Schedule agent call\",\r\n  \"WhatsApp support\",\r\n  \"Live chat support\",\r\n  \"Agent availability\",\r\n  \"Emergency contact\"\r\n];\r\n\r\nexport const getSuggestions = (context: SuggestionContext = {}): string[] => {\r\n  const { lastMessage = '', category, subcategory } = context;\r\n\r\n  // Check for product-related context\r\n  if (lastMessage.toLowerCase().includes('product') || \r\n      lastMessage.toLowerCase().includes('plan') ||\r\n      lastMessage.toLowerCase().includes('policy')) {\r\n    return productSuggestions;\r\n  }\r\n\r\n  // Check for claims-related context\r\n  if (lastMessage.toLowerCase().includes('claim') || \r\n      lastMessage.toLowerCase().includes('document') ||\r\n      category === 'Claims') {\r\n    return claimsSuggestions;\r\n  }\r\n\r\n  // Check for branch-related context\r\n  if (lastMessage.toLowerCase().includes('branch') || \r\n      lastMessage.toLowerCase().includes('location') ||\r\n      lastMessage.toLowerCase().includes('office')) {\r\n    return branchSuggestions;\r\n  }\r\n\r\n  // Check for agent-related context\r\n  if (lastMessage.toLowerCase().includes('agent') || \r\n      lastMessage.toLowerCase().includes('human') ||\r\n      lastMessage.toLowerCase().includes('support')) {\r\n    return agentSuggestions;\r\n  }\r\n\r\n  // Return default suggestions if no specific context is matched\r\n  return defaultSuggestions;\r\n}; "],"mappings":"AAQA,MAAMA,kBAAkB,GAAG,CACzB,6BAA6B,EAC7B,0BAA0B,EAC1B,2BAA2B,EAC3B,mBAAmB,EACnB,mBAAmB,EACnB,uBAAuB,CACxB;AAED,MAAMC,kBAAkB,GAAG,CACzB,mCAAmC,EACnC,6BAA6B,EAC7B,+BAA+B,EAC/B,mCAAmC,EACnC,gCAAgC,EAChC,gCAAgC,CACjC;AAED,MAAMC,iBAAiB,GAAG,CACxB,wBAAwB,EACxB,2BAA2B,EAC3B,uBAAuB,EACvB,4BAA4B,EAC5B,sBAAsB,EACtB,gBAAgB,CACjB;AAED,MAAMC,iBAAiB,GAAG,CACxB,qBAAqB,EACrB,wBAAwB,EACxB,iBAAiB,EACjB,gBAAgB,EAChB,uBAAuB,EACvB,mBAAmB,CACpB;AAED,MAAMC,gBAAgB,GAAG,CACvB,wBAAwB,EACxB,qBAAqB,EACrB,kBAAkB,EAClB,mBAAmB,EACnB,oBAAoB,EACpB,mBAAmB,CACpB;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,OAA0B,GAAG,CAAC,CAAC,KAAe;EAC3E,MAAM;IAAEC,WAAW,GAAG,EAAE;IAAEC,QAAQ;IAAEC;EAAY,CAAC,GAAGH,OAAO;;EAE3D;EACA,IAAIC,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,SAAS,CAAC,IAC7CJ,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,IAC1CJ,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAChD,OAAOV,kBAAkB;EAC3B;;EAEA;EACA,IAAIM,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAC3CJ,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,IAC9CH,QAAQ,KAAK,QAAQ,EAAE;IACzB,OAAON,iBAAiB;EAC1B;;EAEA;EACA,IAAIK,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAC5CJ,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,UAAU,CAAC,IAC9CJ,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAChD,OAAOR,iBAAiB;EAC1B;;EAEA;EACA,IAAII,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAC3CJ,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,IAC3CJ,WAAW,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;IACjD,OAAOP,gBAAgB;EACzB;;EAEA;EACA,OAAOJ,kBAAkB;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}