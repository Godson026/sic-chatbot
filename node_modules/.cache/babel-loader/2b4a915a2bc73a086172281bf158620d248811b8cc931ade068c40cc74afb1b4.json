{"ast":null,"code":"import { sicLifeKnowledge } from './knowledgeBase';\n\n// Chatbot name\nconst CHATBOT_NAME = \"Wofa Ahoto\";\n\n// Define conversation context\n\n// Initialize context\nlet context = {\n  previousQuestions: []\n};\n\n// Response templates with context awareness\nconst RESPONSES = {\n  greeting: [`Hello! I'm ${CHATBOT_NAME}, your SIC Life insurance assistant. How can I help you today?`, `Hi there! I'm ${CHATBOT_NAME}, your SIC Life insurance guide. What can I do for you?`, `Greetings! I'm ${CHATBOT_NAME}, your SIC Life insurance expert. How may I assist you?`],\n  farewell: [\"Goodbye! Have a great day! Remember, SIC Life is here to protect your future.\", \"See you later! Take care! Don't hesitate to reach out if you have more questions about SIC Life.\", \"Bye! Feel free to come back if you need more help with SIC Life insurance!\"],\n  thanks: [\"You're welcome! Is there anything else you'd like to know about SIC Life?\", \"Glad I could help! Do you have any other questions about our insurance products?\", \"My pleasure! Is there anything else you need assistance with regarding SIC Life?\"],\n  name: [\"Nice to meet you! I'll remember your name. How can I help you with SIC Life insurance today?\", \"That's a great name! I'm happy to know you. What brings you to SIC Life today?\", \"Thanks for introducing yourself! How can I assist you with SIC Life insurance?\"],\n  mood_positive: [\"I'm glad you're feeling good! Let's discuss how SIC Life can help protect your positive future.\", \"That's wonderful to hear! Your positive outlook aligns well with SIC Life's mission to provide certainty.\", \"Your positive energy is contagious! Let's explore how SIC Life can enhance your financial security.\"],\n  mood_negative: [\"I'm sorry to hear that. SIC Life is here to help provide security during challenging times. What specific concerns do you have?\", \"That sounds challenging. SIC Life offers various insurance solutions that might help. Would you like to discuss them?\", \"I'm here to listen if you need someone to talk to. SIC Life's mission is to provide certainty when life takes unexpected turns.\"],\n  default: [\"I'm not sure I understand. Could you rephrase your question about SIC Life insurance?\", \"I'm still learning about SIC Life's offerings. Could you try asking in a different way?\", \"I'm not sure about that specific aspect of SIC Life. Can you provide more details?\"]\n};\n\n// Extract name from message\nconst extractName = message => {\n  const nameMatch = message.match(/my name is ([a-zA-Z]+)/i);\n  return nameMatch ? nameMatch[1] : null;\n};\n\n// Detect mood from message\nconst detectMood = message => {\n  const positiveWords = ['happy', 'good', 'great', 'awesome', 'excellent', 'wonderful', 'amazing'];\n  const negativeWords = ['sad', 'bad', 'terrible', 'awful', 'horrible', 'angry', 'frustrated'];\n  const lowerMessage = message.toLowerCase();\n  for (const word of positiveWords) {\n    if (lowerMessage.includes(word)) return 'positive';\n  }\n  for (const word of negativeWords) {\n    if (lowerMessage.includes(word)) return 'negative';\n  }\n  return 'neutral';\n};\n\n// Find relevant knowledge based on user message\nconst findRelevantKnowledge = message => {\n  const lowerMessage = message.toLowerCase();\n\n  // First, check if the message contains keywords related to the last category\n  if (context.lastCategory) {\n    const categoryItems = sicLifeKnowledge.filter(item => item.category === context.lastCategory);\n    for (const item of categoryItems) {\n      if (lowerMessage.includes(item.question.toLowerCase())) {\n        return item;\n      }\n    }\n  }\n\n  // Then, check all knowledge items\n  for (const item of sicLifeKnowledge) {\n    if (lowerMessage.includes(item.question.toLowerCase())) {\n      context.lastCategory = item.category;\n      context.lastSubcategory = item.subcategory;\n      return item;\n    }\n  }\n  return null;\n};\n\n// Get response type based on message content and context\nconst getResponseType = message => {\n  const lowerMessage = message.toLowerCase();\n\n  // Check for name introduction\n  if (lowerMessage.match(/my name is/i)) {\n    return 'name';\n  }\n\n  // Check for greetings\n  if (lowerMessage.match(/^(hi|hello|hey|greetings)/)) {\n    return 'greeting';\n  }\n\n  // Check for farewells\n  if (lowerMessage.match(/^(bye|goodbye|see you|farewell)/)) {\n    return 'farewell';\n  }\n\n  // Check for thanks\n  if (lowerMessage.match(/^(thanks|thank you|appreciate it)/)) {\n    return 'thanks';\n  }\n\n  // Check mood\n  const mood = detectMood(message);\n  if (mood === 'positive') return 'mood_positive';\n  if (mood === 'negative') return 'mood_negative';\n  return 'default';\n};\n\n// Get a random response from the appropriate category\nconst getRandomResponse = type => {\n  const responses = RESPONSES[type];\n  return responses[Math.floor(Math.random() * responses.length)];\n};\n\n// Update context based on message\nconst updateContext = message => {\n  // Extract name if present\n  const name = extractName(message);\n  if (name) {\n    context.userName = name;\n  }\n\n  // Update mood\n  context.mood = detectMood(message);\n\n  // Add to previous questions\n  context.previousQuestions.push(message);\n\n  // Keep only last 5 questions\n  if (context.previousQuestions.length > 5) {\n    context.previousQuestions.shift();\n  }\n};\n\n// Generate personalized response\nconst generatePersonalizedResponse = response => {\n  if (context.userName) {\n    return response.replace(/you/i, context.userName);\n  }\n  return response;\n};\nexport const processMessage = async message => {\n  // Update context\n  updateContext(message);\n\n  // Find relevant knowledge\n  const relevantKnowledge = findRelevantKnowledge(message);\n\n  // If we found relevant knowledge, use it\n  if (relevantKnowledge) {\n    // Simulate thinking time\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      id: Date.now().toString(),\n      content: relevantKnowledge.answer,\n      sender: 'agent',\n      timestamp: new Date()\n    };\n  }\n\n  // Otherwise, use template responses\n  const responseType = getResponseType(message);\n  let responseText = getRandomResponse(responseType);\n  responseText = generatePersonalizedResponse(responseText);\n\n  // Simulate thinking time\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return {\n    id: Date.now().toString(),\n    content: responseText,\n    sender: 'agent',\n    timestamp: new Date()\n  };\n};","map":{"version":3,"names":["sicLifeKnowledge","CHATBOT_NAME","context","previousQuestions","RESPONSES","greeting","farewell","thanks","name","mood_positive","mood_negative","default","extractName","message","nameMatch","match","detectMood","positiveWords","negativeWords","lowerMessage","toLowerCase","word","includes","findRelevantKnowledge","lastCategory","categoryItems","filter","item","category","question","lastSubcategory","subcategory","getResponseType","mood","getRandomResponse","type","responses","Math","floor","random","length","updateContext","userName","push","shift","generatePersonalizedResponse","response","replace","processMessage","relevantKnowledge","Promise","resolve","setTimeout","id","Date","now","toString","content","answer","sender","timestamp","responseType","responseText"],"sources":["C:/Users/Godso/new sic app/src/services/chatbot.ts"],"sourcesContent":["import { Message } from '../types';\r\nimport { sicLifeKnowledge, KnowledgeItem } from './knowledgeBase';\r\n\r\n// Chatbot name\r\nconst CHATBOT_NAME = \"Wofa Ahoto\";\r\n\r\n// Define conversation context\r\ninterface ConversationContext {\r\n  lastTopic?: string;\r\n  userName?: string;\r\n  mood?: 'positive' | 'neutral' | 'negative';\r\n  previousQuestions: string[];\r\n  lastCategory?: string;\r\n  lastSubcategory?: string;\r\n}\r\n\r\n// Initialize context\r\nlet context: ConversationContext = {\r\n  previousQuestions: []\r\n};\r\n\r\n// Response templates with context awareness\r\nconst RESPONSES = {\r\n  greeting: [\r\n    `Hello! I'm ${CHATBOT_NAME}, your SIC Life insurance assistant. How can I help you today?`,\r\n    `Hi there! I'm ${CHATBOT_NAME}, your SIC Life insurance guide. What can I do for you?`,\r\n    `Greetings! I'm ${CHATBOT_NAME}, your SIC Life insurance expert. How may I assist you?`\r\n  ],\r\n  farewell: [\r\n    \"Goodbye! Have a great day! Remember, SIC Life is here to protect your future.\",\r\n    \"See you later! Take care! Don't hesitate to reach out if you have more questions about SIC Life.\",\r\n    \"Bye! Feel free to come back if you need more help with SIC Life insurance!\"\r\n  ],\r\n  thanks: [\r\n    \"You're welcome! Is there anything else you'd like to know about SIC Life?\",\r\n    \"Glad I could help! Do you have any other questions about our insurance products?\",\r\n    \"My pleasure! Is there anything else you need assistance with regarding SIC Life?\"\r\n  ],\r\n  name: [\r\n    \"Nice to meet you! I'll remember your name. How can I help you with SIC Life insurance today?\",\r\n    \"That's a great name! I'm happy to know you. What brings you to SIC Life today?\",\r\n    \"Thanks for introducing yourself! How can I assist you with SIC Life insurance?\"\r\n  ],\r\n  mood_positive: [\r\n    \"I'm glad you're feeling good! Let's discuss how SIC Life can help protect your positive future.\",\r\n    \"That's wonderful to hear! Your positive outlook aligns well with SIC Life's mission to provide certainty.\",\r\n    \"Your positive energy is contagious! Let's explore how SIC Life can enhance your financial security.\"\r\n  ],\r\n  mood_negative: [\r\n    \"I'm sorry to hear that. SIC Life is here to help provide security during challenging times. What specific concerns do you have?\",\r\n    \"That sounds challenging. SIC Life offers various insurance solutions that might help. Would you like to discuss them?\",\r\n    \"I'm here to listen if you need someone to talk to. SIC Life's mission is to provide certainty when life takes unexpected turns.\"\r\n  ],\r\n  default: [\r\n    \"I'm not sure I understand. Could you rephrase your question about SIC Life insurance?\",\r\n    \"I'm still learning about SIC Life's offerings. Could you try asking in a different way?\",\r\n    \"I'm not sure about that specific aspect of SIC Life. Can you provide more details?\"\r\n  ]\r\n};\r\n\r\n// Extract name from message\r\nconst extractName = (message: string): string | null => {\r\n  const nameMatch = message.match(/my name is ([a-zA-Z]+)/i);\r\n  return nameMatch ? nameMatch[1] : null;\r\n};\r\n\r\n// Detect mood from message\r\nconst detectMood = (message: string): 'positive' | 'neutral' | 'negative' => {\r\n  const positiveWords = ['happy', 'good', 'great', 'awesome', 'excellent', 'wonderful', 'amazing'];\r\n  const negativeWords = ['sad', 'bad', 'terrible', 'awful', 'horrible', 'angry', 'frustrated'];\r\n  \r\n  const lowerMessage = message.toLowerCase();\r\n  \r\n  for (const word of positiveWords) {\r\n    if (lowerMessage.includes(word)) return 'positive';\r\n  }\r\n  \r\n  for (const word of negativeWords) {\r\n    if (lowerMessage.includes(word)) return 'negative';\r\n  }\r\n  \r\n  return 'neutral';\r\n};\r\n\r\n// Find relevant knowledge based on user message\r\nconst findRelevantKnowledge = (message: string): KnowledgeItem | null => {\r\n  const lowerMessage = message.toLowerCase();\r\n  \r\n  // First, check if the message contains keywords related to the last category\r\n  if (context.lastCategory) {\r\n    const categoryItems = sicLifeKnowledge.filter(item => item.category === context.lastCategory);\r\n    for (const item of categoryItems) {\r\n      if (lowerMessage.includes(item.question.toLowerCase())) {\r\n        return item;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Then, check all knowledge items\r\n  for (const item of sicLifeKnowledge) {\r\n    if (lowerMessage.includes(item.question.toLowerCase())) {\r\n      context.lastCategory = item.category;\r\n      context.lastSubcategory = item.subcategory;\r\n      return item;\r\n    }\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// Get response type based on message content and context\r\nconst getResponseType = (message: string): keyof typeof RESPONSES => {\r\n  const lowerMessage = message.toLowerCase();\r\n  \r\n  // Check for name introduction\r\n  if (lowerMessage.match(/my name is/i)) {\r\n    return 'name';\r\n  }\r\n  \r\n  // Check for greetings\r\n  if (lowerMessage.match(/^(hi|hello|hey|greetings)/)) {\r\n    return 'greeting';\r\n  }\r\n  \r\n  // Check for farewells\r\n  if (lowerMessage.match(/^(bye|goodbye|see you|farewell)/)) {\r\n    return 'farewell';\r\n  }\r\n  \r\n  // Check for thanks\r\n  if (lowerMessage.match(/^(thanks|thank you|appreciate it)/)) {\r\n    return 'thanks';\r\n  }\r\n  \r\n  // Check mood\r\n  const mood = detectMood(message);\r\n  if (mood === 'positive') return 'mood_positive';\r\n  if (mood === 'negative') return 'mood_negative';\r\n  \r\n  return 'default';\r\n};\r\n\r\n// Get a random response from the appropriate category\r\nconst getRandomResponse = (type: keyof typeof RESPONSES): string => {\r\n  const responses = RESPONSES[type];\r\n  return responses[Math.floor(Math.random() * responses.length)];\r\n};\r\n\r\n// Update context based on message\r\nconst updateContext = (message: string) => {\r\n  // Extract name if present\r\n  const name = extractName(message);\r\n  if (name) {\r\n    context.userName = name;\r\n  }\r\n  \r\n  // Update mood\r\n  context.mood = detectMood(message);\r\n  \r\n  // Add to previous questions\r\n  context.previousQuestions.push(message);\r\n  \r\n  // Keep only last 5 questions\r\n  if (context.previousQuestions.length > 5) {\r\n    context.previousQuestions.shift();\r\n  }\r\n};\r\n\r\n// Generate personalized response\r\nconst generatePersonalizedResponse = (response: string): string => {\r\n  if (context.userName) {\r\n    return response.replace(/you/i, context.userName);\r\n  }\r\n  return response;\r\n};\r\n\r\nexport const processMessage = async (message: string): Promise<Message> => {\r\n  // Update context\r\n  updateContext(message);\r\n  \r\n  // Find relevant knowledge\r\n  const relevantKnowledge = findRelevantKnowledge(message);\r\n  \r\n  // If we found relevant knowledge, use it\r\n  if (relevantKnowledge) {\r\n    // Simulate thinking time\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    return {\r\n      id: Date.now().toString(),\r\n      content: relevantKnowledge.answer,\r\n      sender: 'agent',\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n  \r\n  // Otherwise, use template responses\r\n  const responseType = getResponseType(message);\r\n  let responseText = getRandomResponse(responseType);\r\n  responseText = generatePersonalizedResponse(responseText);\r\n  \r\n  // Simulate thinking time\r\n  await new Promise(resolve => setTimeout(resolve, 1000));\r\n  \r\n  return {\r\n    id: Date.now().toString(),\r\n    content: responseText,\r\n    sender: 'agent',\r\n    timestamp: new Date(),\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}