{"ast":null,"code":"import{sicLifeKnowledge}from'./knowledgeBase';import{responseMap,formatResponseWithConfidence,getFallbackResponse}from'./responseService';import{findBestResponseKey,getMatchConfidence}from'./fuzzyMatcher';// Mock API endpoints (replace with real endpoints in production)\nconst API_URL='https://api.siclife.com';// Chat context to maintain conversation state\nlet chatContext={currentTopic:undefined,userData:{},conversationFlow:undefined};let chatState={previousResponses:[],lastMatchedKey:null};// Helper function to find relevant knowledge base items\nconst findRelevantKnowledge=query=>{const lowerQuery=query.toLowerCase();const words=lowerQuery.split(' ').filter(word=>word.length>2);return sicLifeKnowledge.filter(item=>{const matchScore=item.keywords.reduce((score,keyword)=>{if(words.some(word=>keyword.includes(word)))score+=1;return score;},0);return matchScore>0;}).sort((a,b)=>{const aScore=a.keywords.filter(k=>words.some(w=>k.includes(w))).length;const bScore=b.keywords.filter(k=>words.some(w=>k.includes(w))).length;return bScore-aScore;});};// Utility functions for delays\nconst getTypingDelay=text=>{const baseDelay=1000;// Minimum 1 second\nconst charsPerMinute=300;const delayPerChar=60*1000/charsPerMinute;const delay=Math.min(text.length*delayPerChar,3000);// Max 3 seconds\nreturn Math.max(baseDelay,delay);};const getThinkingDelay=()=>{return 1000+Math.random()*1000;};// Process user message and generate response\nexport const processMessage=async message=>{// Add thinking delay\nawait new Promise(resolve=>setTimeout(resolve,getThinkingDelay()));// Find best matching response using fuzzy matching\nconst matchedKey=findBestResponseKey(message);const confidence=matchedKey?getMatchConfidence(matchedKey,message):0;let responseData;if(matchedKey&&confidence>0.4){responseData=responseMap[matchedKey];chatState.lastMatchedKey=matchedKey;}else{responseData=getFallbackResponse(message,chatState.previousResponses);}// Format response with confidence level\nconst formattedContent=formatResponseWithConfidence(responseData,confidence,true// Always show follow-up questions for better user guidance\n);// Update chat state\nchatState.previousResponses.push(formattedContent);// Keep only last 5 responses in history\nif(chatState.previousResponses.length>5){chatState.previousResponses.shift();}// Add typing delay based on response length\nawait new Promise(resolve=>setTimeout(resolve,getTypingDelay(formattedContent)));// Return a properly formatted Message object\nreturn{id:Date.now().toString(),content:formattedContent,sender:'agent',timestamp:new Date(),type:'text',metadata:{confidence,category:matchedKey?matchedKey.split('_')[0]:'general',hasFollowUp:Boolean(responseData.followUp)}};};// Mock function for quote calculation\nexport const calculateQuote=data=>{const baseRate=10;const ageFactor=Math.floor(data.age/10);const coverageFactor=data.coverageAmount/10000;const healthFactor=data.hasMedicalConditions?1.5:1;return baseRate*ageFactor*coverageFactor*healthFactor;};// Mock function for claim submission\nexport const submitClaim=async data=>{// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,1000));return`CLAIM-${Date.now()}`;};// Mock function for policy status check\nexport const checkPolicyStatus=async policyNumber=>{// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,1000));return{policyNumber,status:'active',nextPaymentDue:new Date(Date.now()+30*24*60*60*1000),premiumAmount:250};};// Mock function for claim status check\nexport const checkClaimStatus=async claimId=>{// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,1000));return{claimId,status:'processing',lastUpdated:new Date(),nextSteps:'Your claim is being reviewed by our claims department.'};};// Reset chat state (useful for testing or starting new conversations)\nexport const resetChatState=()=>{chatState={previousResponses:[],lastMatchedKey:null};};","map":{"version":3,"names":["sicLifeKnowledge","responseMap","formatResponseWithConfidence","getFallbackResponse","findBestResponseKey","getMatchConfidence","API_URL","chatContext","currentTopic","undefined","userData","conversationFlow","chatState","previousResponses","lastMatchedKey","findRelevantKnowledge","query","lowerQuery","toLowerCase","words","split","filter","word","length","item","matchScore","keywords","reduce","score","keyword","some","includes","sort","a","b","aScore","k","w","bScore","getTypingDelay","text","baseDelay","charsPerMinute","delayPerChar","delay","Math","min","max","getThinkingDelay","random","processMessage","message","Promise","resolve","setTimeout","matchedKey","confidence","responseData","formattedContent","push","shift","id","Date","now","toString","content","sender","timestamp","type","metadata","category","hasFollowUp","Boolean","followUp","calculateQuote","data","baseRate","ageFactor","floor","age","coverageFactor","coverageAmount","healthFactor","hasMedicalConditions","submitClaim","checkPolicyStatus","policyNumber","status","nextPaymentDue","premiumAmount","checkClaimStatus","claimId","lastUpdated","nextSteps","resetChatState"],"sources":["C:/Users/Godso/new sic app/src/services/api.ts"],"sourcesContent":["import { Message, QuoteFormData, ClaimFormData, PolicyStatus, ClaimStatus, ChatContext } from '../types';\nimport { sicLifeKnowledge, insuranceProducts, branches, chatbotResponses } from './knowledgeBase';\nimport { responseMap, formatResponseWithConfidence, getFallbackResponse } from './responseService';\nimport { findBestResponseKey, getMatchConfidence } from './fuzzyMatcher';\n\n// Mock API endpoints (replace with real endpoints in production)\nconst API_URL = 'https://api.siclife.com';\n\n// Chat context to maintain conversation state\nlet chatContext: ChatContext = {\n  currentTopic: undefined,\n  userData: {},\n  conversationFlow: undefined\n};\n\ninterface ChatState {\n  previousResponses: string[];\n  lastMatchedKey: string | null;\n}\n\nlet chatState: ChatState = {\n  previousResponses: [],\n  lastMatchedKey: null\n};\n\n// Helper function to find relevant knowledge base items\nconst findRelevantKnowledge = (query: string): any[] => {\n  const lowerQuery = query.toLowerCase();\n  const words = lowerQuery.split(' ').filter(word => word.length > 2);\n  \n  return sicLifeKnowledge.filter(item => {\n    const matchScore = item.keywords.reduce((score, keyword) => {\n      if (words.some(word => keyword.includes(word))) score += 1;\n      return score;\n    }, 0);\n    return matchScore > 0;\n  }).sort((a, b) => {\n    const aScore = a.keywords.filter(k => words.some(w => k.includes(w))).length;\n    const bScore = b.keywords.filter(k => words.some(w => k.includes(w))).length;\n    return bScore - aScore;\n  });\n};\n\n// Utility functions for delays\nconst getTypingDelay = (text: string): number => {\n  const baseDelay = 1000; // Minimum 1 second\n  const charsPerMinute = 300;\n  const delayPerChar = (60 * 1000) / charsPerMinute;\n  const delay = Math.min(text.length * delayPerChar, 3000); // Max 3 seconds\n  return Math.max(baseDelay, delay);\n};\n\nconst getThinkingDelay = (): number => {\n  return 1000 + Math.random() * 1000;\n};\n\n// Process user message and generate response\nexport const processMessage = async (message: string): Promise<Message> => {\n  // Add thinking delay\n  await new Promise(resolve => setTimeout(resolve, getThinkingDelay()));\n\n  // Find best matching response using fuzzy matching\n  const matchedKey = findBestResponseKey(message);\n  const confidence = matchedKey ? getMatchConfidence(matchedKey, message) : 0;\n\n  let responseData;\n  if (matchedKey && confidence > 0.4) {\n    responseData = responseMap[matchedKey];\n    chatState.lastMatchedKey = matchedKey;\n  } else {\n    responseData = getFallbackResponse(message, chatState.previousResponses);\n  }\n\n  // Format response with confidence level\n  const formattedContent = formatResponseWithConfidence(\n    responseData,\n    confidence,\n    true // Always show follow-up questions for better user guidance\n  );\n\n  // Update chat state\n  chatState.previousResponses.push(formattedContent);\n  \n  // Keep only last 5 responses in history\n  if (chatState.previousResponses.length > 5) {\n    chatState.previousResponses.shift();\n  }\n\n  // Add typing delay based on response length\n  await new Promise(resolve => setTimeout(resolve, getTypingDelay(formattedContent)));\n\n  // Return a properly formatted Message object\n  return {\n    id: Date.now().toString(),\n    content: formattedContent,\n    sender: 'agent',\n    timestamp: new Date(),\n    type: 'text',\n    metadata: {\n      confidence,\n      category: matchedKey ? matchedKey.split('_')[0] : 'general',\n      hasFollowUp: Boolean(responseData.followUp)\n    }\n  };\n};\n\n// Mock function for quote calculation\nexport const calculateQuote = (data: QuoteFormData): number => {\n  const baseRate = 10;\n  const ageFactor = Math.floor(data.age / 10);\n  const coverageFactor = data.coverageAmount / 10000;\n  const healthFactor = data.hasMedicalConditions ? 1.5 : 1;\n  \n  return baseRate * ageFactor * coverageFactor * healthFactor;\n};\n\n// Mock function for claim submission\nexport const submitClaim = async (data: ClaimFormData): Promise<string> => {\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return `CLAIM-${Date.now()}`;\n};\n\n// Mock function for policy status check\nexport const checkPolicyStatus = async (policyNumber: string): Promise<PolicyStatus> => {\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return {\n    policyNumber,\n    status: 'active',\n    nextPaymentDue: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n    premiumAmount: 250\n  };\n};\n\n// Mock function for claim status check\nexport const checkClaimStatus = async (claimId: string): Promise<ClaimStatus> => {\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return {\n    claimId,\n    status: 'processing',\n    lastUpdated: new Date(),\n    nextSteps: 'Your claim is being reviewed by our claims department.'\n  };\n};\n\n// Reset chat state (useful for testing or starting new conversations)\nexport const resetChatState = () => {\n  chatState = {\n    previousResponses: [],\n    lastMatchedKey: null\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}