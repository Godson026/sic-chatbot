{"ast":null,"code":"import Fuse from 'fuse.js';\nimport { responseMap } from './responseService';\n\n// Interface for search items\n\n// Convert responseMap keys to SearchItems with aliases and combined search text\nconst searchItems = Object.keys(responseMap).map(key => {\n  const aliases = getAliases(key);\n  const category = getCategoryFromKey(key);\n  // Combine all searchable text for better matching\n  const searchText = [key.replace(/_/g, ' '), ...aliases, category, responseMap[key].answer.substring(0, 150) // Include start of answer text\n  ].join(' ').toLowerCase();\n  return {\n    key,\n    aliases,\n    category,\n    searchText\n  };\n});\n\n// Enhanced Fuse.js options for better matching\nconst fuseOptions = {\n  includeScore: true,\n  threshold: 0.5,\n  // More lenient threshold\n  minMatchCharLength: 2,\n  // Reduced for better partial matches\n  distance: 200,\n  // Increased distance for better fuzzy matching\n  keys: [{\n    name: 'searchText',\n    weight: 0.7\n  },\n  // Primary search field\n  {\n    name: 'aliases',\n    weight: 0.2\n  }, {\n    name: 'category',\n    weight: 0.1\n  }],\n  shouldSort: true,\n  findAllMatches: true,\n  location: 0,\n  ignoreLocation: true // Ignore location for better matching\n};\n\n// Initialize Fuse instance\nconst fuse = new Fuse(searchItems, fuseOptions);\n\n// Enhanced input normalization\nfunction normalizeInput(input) {\n  const normalized = input.toLowerCase().replace(/[^\\w\\s]/gi, '') // Remove special characters\n  .replace(/\\s+/g, ' ') // Normalize spaces\n  .trim();\n  console.log('Normalized input:', normalized);\n  return normalized;\n}\n\n// Enhanced getAliases function with more variations\nfunction getAliases(key) {\n  const commonAliases = {\n    'claims_process': ['make claim', 'file claim', 'claim process', 'claim procedure', 'death claim', 'accident claim', 'maturity claim', 'how to claim', 'claim money', 'insurance claim', 'submit claim', 'start claim', 'begin claim', 'initiate claim'],\n    'payment_methods': ['pay premium', 'payment options', 'how to pay', 'momo payment', 'mobile money', 'bank payment', 'pay insurance', 'premium payment', 'salary deduction', 'standing order', 'make payment', 'payment process', 'pay bill', 'payment method'],\n    'education_plan': ['school fees', 'education policy', 'child education', 'study plan', 'university cover', 'education insurance', 'school insurance', 'child plan', 'education savings', 'academic plan'],\n    'investment_returns': ['investment plans', 'returns', 'interest rate', 'investment benefits', 'profit', 'investment options', 'savings plan', 'investment policy', 'growth', 'investment returns'],\n    'policy_updates': ['update policy', 'change policy', 'modify policy', 'policy changes', 'policy information', 'policy details', 'check policy', 'policy status', 'policy document', 'insurance details'],\n    'branch_locations': ['office location', 'branch office', 'find branch', 'nearest office', 'branch address', 'where located', 'directions', 'head office', 'regional office', 'branch contacts']\n  };\n  const baseAliases = commonAliases[key] || [];\n  const keyWords = key.split('_');\n\n  // Add variations of the key itself\n  const keyVariations = [key.replace(/_/g, ' '), key.replace(/_/g, ''), ...keyWords, keyWords.join(' ')];\n  return [...new Set([...baseAliases, ...keyVariations])];\n}\n\n// Enhanced findBestResponseKey with detailed logging\nexport function findBestResponseKey(userInput) {\n  const normalizedInput = normalizeInput(userInput);\n  console.log('\\n=== Fuzzy Search Debug ===');\n  console.log('Original input:', userInput);\n  console.log('Normalized input:', normalizedInput);\n  const results = fuse.search(normalizedInput);\n  console.log('\\nSearch results:');\n  results.slice(0, 3).forEach((result, index) => {\n    console.log(`\\nMatch ${index + 1}:`);\n    console.log('Key:', result.item.key);\n    console.log('Score:', result.score);\n    console.log('Category:', result.item.category);\n    console.log('Matched aliases:', result.item.aliases.slice(0, 3));\n  });\n  if (results.length === 0) {\n    console.log('\\nNo matches found!');\n    return null;\n  }\n\n  // Only return match if confidence is high enough\n  if (results[0].score && results[0].score <= 0.5) {\n    console.log('\\nBest match selected:', results[0].item.key);\n    return results[0].item.key;\n  }\n  console.log('\\nNo match with sufficient confidence found');\n  return null;\n}\n\n// Enhanced getMatchConfidence with logging\nexport function getMatchConfidence(matchedKey, userInput) {\n  const results = fuse.search(normalizeInput(userInput));\n  const confidence = results.length > 0 && results[0].item.key === matchedKey ? 1 - (results[0].score || 0) : 0;\n  console.log('\\n=== Confidence Score ===');\n  console.log('Matched key:', matchedKey);\n  console.log('Confidence:', confidence);\n  return confidence;\n}\n\n// Get related topics based on category and previous matches\nexport function getRelatedTopics(matchedKey) {\n  const category = getCategoryFromKey(matchedKey);\n  const relatedItems = searchItems.filter(item => item.category === category && item.key !== matchedKey).slice(0, 2).map(item => item.key);\n  console.log('\\n=== Related Topics ===');\n  console.log('Category:', category);\n  console.log('Related items:', relatedItems);\n  return relatedItems;\n}\n\n// Get category from key\nfunction getCategoryFromKey(key) {\n  if (key.includes('claim')) return 'claims';\n  if (key.includes('payment')) return 'payments';\n  if (key.includes('education')) return 'education';\n  if (key.includes('investment')) return 'investments';\n  if (key.includes('policy')) return 'policy';\n  if (key.includes('branch')) return 'branches';\n  return 'general';\n}","map":{"version":3,"names":["Fuse","responseMap","searchItems","Object","keys","map","key","aliases","getAliases","category","getCategoryFromKey","searchText","replace","answer","substring","join","toLowerCase","fuseOptions","includeScore","threshold","minMatchCharLength","distance","name","weight","shouldSort","findAllMatches","location","ignoreLocation","fuse","normalizeInput","input","normalized","trim","console","log","commonAliases","baseAliases","keyWords","split","keyVariations","Set","findBestResponseKey","userInput","normalizedInput","results","search","slice","forEach","result","index","item","score","length","getMatchConfidence","matchedKey","confidence","getRelatedTopics","relatedItems","filter","includes"],"sources":["C:/Users/Godso/new sic app/src/services/fuzzyMatcher.ts"],"sourcesContent":["import Fuse from 'fuse.js';\r\nimport { responseMap } from './responseService';\r\n\r\n// Interface for search items\r\ninterface SearchItem {\r\n  key: string;\r\n  aliases: string[];\r\n  category: string;\r\n  searchText: string; // Added field for combined searchable text\r\n}\r\n\r\n// Convert responseMap keys to SearchItems with aliases and combined search text\r\nconst searchItems: SearchItem[] = Object.keys(responseMap).map(key => {\r\n  const aliases = getAliases(key);\r\n  const category = getCategoryFromKey(key);\r\n  // Combine all searchable text for better matching\r\n  const searchText = [\r\n    key.replace(/_/g, ' '),\r\n    ...aliases,\r\n    category,\r\n    responseMap[key].answer.substring(0, 150) // Include start of answer text\r\n  ].join(' ').toLowerCase();\r\n\r\n  return {\r\n    key,\r\n    aliases,\r\n    category,\r\n    searchText\r\n  };\r\n});\r\n\r\n// Enhanced Fuse.js options for better matching\r\nconst fuseOptions = {\r\n  includeScore: true,\r\n  threshold: 0.5, // More lenient threshold\r\n  minMatchCharLength: 2, // Reduced for better partial matches\r\n  distance: 200, // Increased distance for better fuzzy matching\r\n  keys: [\r\n    { name: 'searchText', weight: 0.7 }, // Primary search field\r\n    { name: 'aliases', weight: 0.2 },\r\n    { name: 'category', weight: 0.1 }\r\n  ],\r\n  shouldSort: true,\r\n  findAllMatches: true,\r\n  location: 0,\r\n  ignoreLocation: true, // Ignore location for better matching\r\n};\r\n\r\n// Initialize Fuse instance\r\nconst fuse = new Fuse(searchItems, fuseOptions);\r\n\r\n// Enhanced input normalization\r\nfunction normalizeInput(input: string): string {\r\n  const normalized = input\r\n    .toLowerCase()\r\n    .replace(/[^\\w\\s]/gi, '') // Remove special characters\r\n    .replace(/\\s+/g, ' ')     // Normalize spaces\r\n    .trim();\r\n  \r\n  console.log('Normalized input:', normalized);\r\n  return normalized;\r\n}\r\n\r\n// Enhanced getAliases function with more variations\r\nfunction getAliases(key: string): string[] {\r\n  const commonAliases: Record<string, string[]> = {\r\n    'claims_process': [\r\n      'make claim', 'file claim', 'claim process', 'claim procedure',\r\n      'death claim', 'accident claim', 'maturity claim',\r\n      'how to claim', 'claim money', 'insurance claim',\r\n      'submit claim', 'start claim', 'begin claim', 'initiate claim'\r\n    ],\r\n    'payment_methods': [\r\n      'pay premium', 'payment options', 'how to pay', 'momo payment',\r\n      'mobile money', 'bank payment', 'pay insurance',\r\n      'premium payment', 'salary deduction', 'standing order',\r\n      'make payment', 'payment process', 'pay bill', 'payment method'\r\n    ],\r\n    'education_plan': [\r\n      'school fees', 'education policy', 'child education', 'study plan',\r\n      'university cover', 'education insurance', 'school insurance',\r\n      'child plan', 'education savings', 'academic plan'\r\n    ],\r\n    'investment_returns': [\r\n      'investment plans', 'returns', 'interest rate', 'investment benefits',\r\n      'profit', 'investment options', 'savings plan',\r\n      'investment policy', 'growth', 'investment returns'\r\n    ],\r\n    'policy_updates': [\r\n      'update policy', 'change policy', 'modify policy', 'policy changes',\r\n      'policy information', 'policy details', 'check policy',\r\n      'policy status', 'policy document', 'insurance details'\r\n    ],\r\n    'branch_locations': [\r\n      'office location', 'branch office', 'find branch', 'nearest office',\r\n      'branch address', 'where located', 'directions',\r\n      'head office', 'regional office', 'branch contacts'\r\n    ]\r\n  };\r\n\r\n  const baseAliases = commonAliases[key] || [];\r\n  const keyWords = key.split('_');\r\n  \r\n  // Add variations of the key itself\r\n  const keyVariations = [\r\n    key.replace(/_/g, ' '),\r\n    key.replace(/_/g, ''),\r\n    ...keyWords,\r\n    keyWords.join(' ')\r\n  ];\r\n\r\n  return [...new Set([...baseAliases, ...keyVariations])];\r\n}\r\n\r\n// Enhanced findBestResponseKey with detailed logging\r\nexport function findBestResponseKey(userInput: string): string | null {\r\n  const normalizedInput = normalizeInput(userInput);\r\n  \r\n  console.log('\\n=== Fuzzy Search Debug ===');\r\n  console.log('Original input:', userInput);\r\n  console.log('Normalized input:', normalizedInput);\r\n  \r\n  const results = fuse.search(normalizedInput);\r\n  \r\n  console.log('\\nSearch results:');\r\n  results.slice(0, 3).forEach((result, index) => {\r\n    console.log(`\\nMatch ${index + 1}:`);\r\n    console.log('Key:', result.item.key);\r\n    console.log('Score:', result.score);\r\n    console.log('Category:', result.item.category);\r\n    console.log('Matched aliases:', result.item.aliases.slice(0, 3));\r\n  });\r\n  \r\n  if (results.length === 0) {\r\n    console.log('\\nNo matches found!');\r\n    return null;\r\n  }\r\n\r\n  // Only return match if confidence is high enough\r\n  if (results[0].score && results[0].score <= 0.5) {\r\n    console.log('\\nBest match selected:', results[0].item.key);\r\n    return results[0].item.key;\r\n  }\r\n\r\n  console.log('\\nNo match with sufficient confidence found');\r\n  return null;\r\n}\r\n\r\n// Enhanced getMatchConfidence with logging\r\nexport function getMatchConfidence(matchedKey: string, userInput: string): number {\r\n  const results = fuse.search(normalizeInput(userInput));\r\n  const confidence = results.length > 0 && results[0].item.key === matchedKey ? \r\n    1 - (results[0].score || 0) : 0;\r\n  \r\n  console.log('\\n=== Confidence Score ===');\r\n  console.log('Matched key:', matchedKey);\r\n  console.log('Confidence:', confidence);\r\n  \r\n  return confidence;\r\n}\r\n\r\n// Get related topics based on category and previous matches\r\nexport function getRelatedTopics(matchedKey: string): string[] {\r\n  const category = getCategoryFromKey(matchedKey);\r\n  const relatedItems = searchItems\r\n    .filter(item => item.category === category && item.key !== matchedKey)\r\n    .slice(0, 2)\r\n    .map(item => item.key);\r\n    \r\n  console.log('\\n=== Related Topics ===');\r\n  console.log('Category:', category);\r\n  console.log('Related items:', relatedItems);\r\n  \r\n  return relatedItems;\r\n}\r\n\r\n// Get category from key\r\nfunction getCategoryFromKey(key: string): string {\r\n  if (key.includes('claim')) return 'claims';\r\n  if (key.includes('payment')) return 'payments';\r\n  if (key.includes('education')) return 'education';\r\n  if (key.includes('investment')) return 'investments';\r\n  if (key.includes('policy')) return 'policy';\r\n  if (key.includes('branch')) return 'branches';\r\n  return 'general';\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}