{"ast":null,"code":"import Fuse from'fuse.js';import{responseMap}from'./responseService';// Interface for search items\n// Convert responseMap keys to SearchItems with aliases and combined search text\nconst searchItems=Object.keys(responseMap).map(key=>{const aliases=getAliases(key);const category=getCategoryFromKey(key);// Combine all searchable text for better matching\nconst searchText=[key.replace(/_/g,' '),...aliases,category,responseMap[key].answer.substring(0,150)// Include start of answer text\n].join(' ').toLowerCase();return{key,aliases,category,searchText};});// Enhanced Fuse.js options for better matching\nconst fuseOptions={includeScore:true,threshold:0.5,// More lenient threshold\nminMatchCharLength:2,// Reduced for better partial matches\ndistance:200,// Increased distance for better fuzzy matching\nkeys:[{name:'searchText',weight:0.7},// Primary search field\n{name:'aliases',weight:0.2},{name:'category',weight:0.1}],shouldSort:true,findAllMatches:true,location:0,ignoreLocation:true// Ignore location for better matching\n};// Initialize Fuse instance\nconst fuse=new Fuse(searchItems,fuseOptions);// Enhanced input normalization\nfunction normalizeInput(input){const normalized=input.toLowerCase().replace(/[^\\w\\s]/gi,'')// Remove special characters\n.replace(/\\s+/g,' ')// Normalize spaces\n.trim();console.log('Normalized input:',normalized);return normalized;}// Enhanced getAliases function with more variations\nfunction getAliases(key){const commonAliases={'claims_process':['make claim','file claim','claim process','claim procedure','death claim','accident claim','maturity claim','how to claim','claim money','insurance claim','submit claim','start claim','begin claim','initiate claim'],'payment_methods':['pay premium','payment options','how to pay','momo payment','mobile money','bank payment','pay insurance','premium payment','salary deduction','standing order','make payment','payment process','pay bill','payment method'],'education_plan':['school fees','education policy','child education','study plan','university cover','education insurance','school insurance','child plan','education savings','academic plan'],'investment_returns':['investment plans','returns','interest rate','investment benefits','profit','investment options','savings plan','investment policy','growth','investment returns'],'policy_updates':['update policy','change policy','modify policy','policy changes','policy information','policy details','check policy','policy status','policy document','insurance details'],'branch_locations':['office location','branch office','find branch','nearest office','branch address','where located','directions','head office','regional office','branch contacts']};const baseAliases=commonAliases[key]||[];const keyWords=key.split('_');// Add variations of the key itself\nconst keyVariations=[key.replace(/_/g,' '),key.replace(/_/g,''),...keyWords,keyWords.join(' ')];return Array.from(new Set([...baseAliases,...keyVariations]));}// Enhanced findBestResponseKey with detailed logging\nexport function findBestResponseKey(userInput){const normalizedInput=normalizeInput(userInput);console.log('\\n=== Fuzzy Search Debug ===');console.log('Original input:',userInput);console.log('Normalized input:',normalizedInput);const results=fuse.search(normalizedInput);console.log('\\nSearch results:');results.slice(0,3).forEach((result,index)=>{console.log(`\\nMatch ${index+1}:`);console.log('Key:',result.item.key);console.log('Score:',result.score);console.log('Category:',result.item.category);console.log('Matched aliases:',result.item.aliases.slice(0,3));});if(results.length===0){console.log('\\nNo matches found!');return null;}// Only return match if confidence is high enough\nif(results[0].score&&results[0].score<=0.5){console.log('\\nBest match selected:',results[0].item.key);return results[0].item.key;}console.log('\\nNo match with sufficient confidence found');return null;}// Enhanced getMatchConfidence with logging\nexport function getMatchConfidence(matchedKey,userInput){const results=fuse.search(normalizeInput(userInput));const confidence=results.length>0&&results[0].item.key===matchedKey?1-(results[0].score||0):0;console.log('\\n=== Confidence Score ===');console.log('Matched key:',matchedKey);console.log('Confidence:',confidence);return confidence;}// Get related topics based on category and previous matches\nexport function getRelatedTopics(matchedKey){const category=getCategoryFromKey(matchedKey);const relatedItems=searchItems.filter(item=>item.category===category&&item.key!==matchedKey).slice(0,2).map(item=>item.key);console.log('\\n=== Related Topics ===');console.log('Category:',category);console.log('Related items:',relatedItems);return relatedItems;}// Get category from key\nfunction getCategoryFromKey(key){if(key.includes('claim'))return'claims';if(key.includes('payment'))return'payments';if(key.includes('education'))return'education';if(key.includes('investment'))return'investments';if(key.includes('policy'))return'policy';if(key.includes('branch'))return'branches';return'general';}","map":{"version":3,"names":["Fuse","responseMap","searchItems","Object","keys","map","key","aliases","getAliases","category","getCategoryFromKey","searchText","replace","answer","substring","join","toLowerCase","fuseOptions","includeScore","threshold","minMatchCharLength","distance","name","weight","shouldSort","findAllMatches","location","ignoreLocation","fuse","normalizeInput","input","normalized","trim","console","log","commonAliases","baseAliases","keyWords","split","keyVariations","Array","from","Set","findBestResponseKey","userInput","normalizedInput","results","search","slice","forEach","result","index","item","score","length","getMatchConfidence","matchedKey","confidence","getRelatedTopics","relatedItems","filter","includes"],"sources":["C:/Users/Godso/new sic app/src/services/fuzzyMatcher.ts"],"sourcesContent":["import Fuse from 'fuse.js';\r\nimport { responseMap } from './responseService';\r\n\r\n// Interface for search items\r\ninterface SearchItem {\r\n  key: string;\r\n  aliases: string[];\r\n  category: string;\r\n  searchText: string; // Added field for combined searchable text\r\n}\r\n\r\n// Convert responseMap keys to SearchItems with aliases and combined search text\r\nconst searchItems: SearchItem[] = Object.keys(responseMap).map(key => {\r\n  const aliases = getAliases(key);\r\n  const category = getCategoryFromKey(key);\r\n  // Combine all searchable text for better matching\r\n  const searchText = [\r\n    key.replace(/_/g, ' '),\r\n    ...aliases,\r\n    category,\r\n    responseMap[key].answer.substring(0, 150) // Include start of answer text\r\n  ].join(' ').toLowerCase();\r\n\r\n  return {\r\n    key,\r\n    aliases,\r\n    category,\r\n    searchText\r\n  };\r\n});\r\n\r\n// Enhanced Fuse.js options for better matching\r\nconst fuseOptions = {\r\n  includeScore: true,\r\n  threshold: 0.5, // More lenient threshold\r\n  minMatchCharLength: 2, // Reduced for better partial matches\r\n  distance: 200, // Increased distance for better fuzzy matching\r\n  keys: [\r\n    { name: 'searchText', weight: 0.7 }, // Primary search field\r\n    { name: 'aliases', weight: 0.2 },\r\n    { name: 'category', weight: 0.1 }\r\n  ],\r\n  shouldSort: true,\r\n  findAllMatches: true,\r\n  location: 0,\r\n  ignoreLocation: true, // Ignore location for better matching\r\n};\r\n\r\n// Initialize Fuse instance\r\nconst fuse = new Fuse(searchItems, fuseOptions);\r\n\r\n// Enhanced input normalization\r\nfunction normalizeInput(input: string): string {\r\n  const normalized = input\r\n    .toLowerCase()\r\n    .replace(/[^\\w\\s]/gi, '') // Remove special characters\r\n    .replace(/\\s+/g, ' ')     // Normalize spaces\r\n    .trim();\r\n  \r\n  console.log('Normalized input:', normalized);\r\n  return normalized;\r\n}\r\n\r\n// Enhanced getAliases function with more variations\r\nfunction getAliases(key: string): string[] {\r\n  const commonAliases: Record<string, string[]> = {\r\n    'claims_process': [\r\n      'make claim', 'file claim', 'claim process', 'claim procedure',\r\n      'death claim', 'accident claim', 'maturity claim',\r\n      'how to claim', 'claim money', 'insurance claim',\r\n      'submit claim', 'start claim', 'begin claim', 'initiate claim'\r\n    ],\r\n    'payment_methods': [\r\n      'pay premium', 'payment options', 'how to pay', 'momo payment',\r\n      'mobile money', 'bank payment', 'pay insurance',\r\n      'premium payment', 'salary deduction', 'standing order',\r\n      'make payment', 'payment process', 'pay bill', 'payment method'\r\n    ],\r\n    'education_plan': [\r\n      'school fees', 'education policy', 'child education', 'study plan',\r\n      'university cover', 'education insurance', 'school insurance',\r\n      'child plan', 'education savings', 'academic plan'\r\n    ],\r\n    'investment_returns': [\r\n      'investment plans', 'returns', 'interest rate', 'investment benefits',\r\n      'profit', 'investment options', 'savings plan',\r\n      'investment policy', 'growth', 'investment returns'\r\n    ],\r\n    'policy_updates': [\r\n      'update policy', 'change policy', 'modify policy', 'policy changes',\r\n      'policy information', 'policy details', 'check policy',\r\n      'policy status', 'policy document', 'insurance details'\r\n    ],\r\n    'branch_locations': [\r\n      'office location', 'branch office', 'find branch', 'nearest office',\r\n      'branch address', 'where located', 'directions',\r\n      'head office', 'regional office', 'branch contacts'\r\n    ]\r\n  };\r\n\r\n  const baseAliases = commonAliases[key] || [];\r\n  const keyWords = key.split('_');\r\n  \r\n  // Add variations of the key itself\r\n  const keyVariations = [\r\n    key.replace(/_/g, ' '),\r\n    key.replace(/_/g, ''),\r\n    ...keyWords,\r\n    keyWords.join(' ')\r\n  ];\r\n\r\n  return Array.from(new Set([...baseAliases, ...keyVariations]));\r\n}\r\n\r\n// Enhanced findBestResponseKey with detailed logging\r\nexport function findBestResponseKey(userInput: string): string | null {\r\n  const normalizedInput = normalizeInput(userInput);\r\n  \r\n  console.log('\\n=== Fuzzy Search Debug ===');\r\n  console.log('Original input:', userInput);\r\n  console.log('Normalized input:', normalizedInput);\r\n  \r\n  const results = fuse.search(normalizedInput);\r\n  \r\n  console.log('\\nSearch results:');\r\n  results.slice(0, 3).forEach((result, index) => {\r\n    console.log(`\\nMatch ${index + 1}:`);\r\n    console.log('Key:', result.item.key);\r\n    console.log('Score:', result.score);\r\n    console.log('Category:', result.item.category);\r\n    console.log('Matched aliases:', result.item.aliases.slice(0, 3));\r\n  });\r\n  \r\n  if (results.length === 0) {\r\n    console.log('\\nNo matches found!');\r\n    return null;\r\n  }\r\n\r\n  // Only return match if confidence is high enough\r\n  if (results[0].score && results[0].score <= 0.5) {\r\n    console.log('\\nBest match selected:', results[0].item.key);\r\n    return results[0].item.key;\r\n  }\r\n\r\n  console.log('\\nNo match with sufficient confidence found');\r\n  return null;\r\n}\r\n\r\n// Enhanced getMatchConfidence with logging\r\nexport function getMatchConfidence(matchedKey: string, userInput: string): number {\r\n  const results = fuse.search(normalizeInput(userInput));\r\n  const confidence = results.length > 0 && results[0].item.key === matchedKey ? \r\n    1 - (results[0].score || 0) : 0;\r\n  \r\n  console.log('\\n=== Confidence Score ===');\r\n  console.log('Matched key:', matchedKey);\r\n  console.log('Confidence:', confidence);\r\n  \r\n  return confidence;\r\n}\r\n\r\n// Get related topics based on category and previous matches\r\nexport function getRelatedTopics(matchedKey: string): string[] {\r\n  const category = getCategoryFromKey(matchedKey);\r\n  const relatedItems = searchItems\r\n    .filter(item => item.category === category && item.key !== matchedKey)\r\n    .slice(0, 2)\r\n    .map(item => item.key);\r\n    \r\n  console.log('\\n=== Related Topics ===');\r\n  console.log('Category:', category);\r\n  console.log('Related items:', relatedItems);\r\n  \r\n  return relatedItems;\r\n}\r\n\r\n// Get category from key\r\nfunction getCategoryFromKey(key: string): string {\r\n  if (key.includes('claim')) return 'claims';\r\n  if (key.includes('payment')) return 'payments';\r\n  if (key.includes('education')) return 'education';\r\n  if (key.includes('investment')) return 'investments';\r\n  if (key.includes('policy')) return 'policy';\r\n  if (key.includes('branch')) return 'branches';\r\n  return 'general';\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}